{"version":3,"file":"static/js/839.08edb413.chunk.js","mappings":"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","sources":["../node_modules/pixi.js/src/rendering/renderers/shared/renderTarget/RenderTarget.ts","../node_modules/pixi.js/src/rendering/high-shader/shader-bits/localUniformBit.ts","../node_modules/pixi.js/src/rendering/renderers/shared/state/State.ts","../node_modules/pixi.js/src/scene/sprite/BatchableSprite.ts","../node_modules/pixi.js/src/rendering/high-shader/shader-bits/textureBit.ts","../node_modules/pixi.js/src/rendering/renderers/gl/shader/program/ensureAttributes.ts","../node_modules/pixi.js/src/rendering/renderers/shared/texture/utils/getCanvasTexture.ts","../node_modules/pixi.js/src/rendering/renderers/shared/shader/utils/uboSyncFunctions.ts","../node_modules/pixi.js/src/rendering/renderers/gpu/state/GpuStencilModesToPixi.ts","../node_modules/pixi.js/src/scene/container/CustomRenderPipe.ts","../node_modules/pixi.js/src/scene/container/utils/executeInstructions.ts","../node_modules/pixi.js/src/scene/container/RenderGroupPipe.ts","../node_modules/pixi.js/src/scene/container/utils/clearList.ts","../node_modules/pixi.js/src/scene/container/utils/updateRenderGroupTransforms.ts","../node_modules/pixi.js/src/scene/container/RenderGroupSystem.ts","../node_modules/pixi.js/src/scene/container/utils/validateRenderables.ts","../node_modules/pixi.js/src/scene/sprite/SpritePipe.ts","../node_modules/pixi.js/src/rendering/batcher/shared/BatcherPipe.ts","../node_modules/pixi.js/src/filters/Filter.ts","../node_modules/pixi.js/src/filters/mask/MaskFilter.ts","../node_modules/pixi.js/src/rendering/mask/alpha/AlphaMaskPipe.ts","../node_modules/pixi.js/src/rendering/mask/color/ColorMaskPipe.ts","../node_modules/pixi.js/src/rendering/mask/stencil/StencilMaskPipe.ts","../node_modules/pixi.js/src/rendering/renderers/shared/background/BackgroundSystem.ts","../node_modules/pixi.js/src/rendering/renderers/shared/blendModes/BlendModePipe.ts","../node_modules/pixi.js/src/rendering/renderers/shared/extract/ExtractSystem.ts","../node_modules/pixi.js/src/rendering/renderers/shared/texture/RenderTexture.ts","../node_modules/pixi.js/src/rendering/renderers/shared/extract/GenerateTextureSystem.ts","../node_modules/pixi.js/src/rendering/renderers/shared/renderTarget/GlobalUniformSystem.ts","../node_modules/pixi.js/src/rendering/renderers/shared/SchedulerSystem.ts","../node_modules/pixi.js/src/utils/sayHello.ts","../node_modules/pixi.js/src/rendering/renderers/shared/startup/HelloSystem.ts","../node_modules/pixi.js/src/utils/data/clean.ts","../node_modules/pixi.js/src/rendering/renderers/shared/texture/RenderableGCSystem.ts","../node_modules/pixi.js/src/rendering/renderers/shared/texture/TextureGCSystem.ts","../node_modules/pixi.js/src/rendering/renderers/shared/view/ViewSystem.ts","../node_modules/pixi.js/src/rendering/renderers/shared/system/SharedSystems.ts","../node_modules/pixi.js/src/rendering/renderers/shared/renderTarget/RenderTargetSystem.ts","../node_modules/pixi.js/src/rendering/renderers/shared/renderTarget/isRenderingToScreen.ts","../node_modules/pixi.js/src/rendering/renderers/gpu/renderTarget/calculateProjection.ts","../node_modules/pixi.js/src/rendering/renderers/shared/shader/utils/createUboSyncFunction.ts","../node_modules/pixi.js/src/rendering/renderers/shared/shader/utils/uniformParsers.ts","../node_modules/pixi.js/src/rendering/renderers/shared/shader/UboSystem.ts","../node_modules/pixi.js/src/scene/graphics/gpu/colorToUniform.ts","../node_modules/pixi.js/src/rendering/renderers/shared/buffer/BufferResource.ts"],"sourcesContent":["// what we are building is a platform and a framework.\n// import { Matrix } from '../../shared/maths/Matrix';\nimport { uid } from '../../../../utils/data/uid';\nimport { TextureSource } from '../texture/sources/TextureSource';\nimport { Texture } from '../texture/Texture';\n\nimport type { BindableTexture } from '../texture/Texture';\n\n/**\n * Options for creating a render target.\n * @memberof rendering\n */\nexport interface RenderTargetOptions\n{\n    /** the width of the RenderTarget */\n    width?: number;\n    /** the height of the RenderTarget */\n    height?: number;\n    /** the resolution of the RenderTarget */\n    resolution?: number;\n    /** an array of textures, or a number indicating how many color textures there should be */\n    colorTextures?: BindableTexture[] | number;\n    /** should this render target have a stencil buffer? */\n    stencil?: boolean;\n    /** should this render target have a depth buffer? */\n    depth?: boolean;\n    /** a depth stencil texture that the depth and stencil outputs will be written to */\n    depthStencilTexture?: BindableTexture | boolean;\n    /** should this render target be antialiased? */\n    antialias?: boolean;\n    /** is this a root element, true if this is gl context owners render target */\n    isRoot?: boolean;\n}\n\n/**\n * A class that describes what the renderers are rendering to.\n * This can be as simple as a Texture, or as complex as a multi-texture, multi-sampled render target.\n * Support for stencil and depth buffers is also included.\n *\n * If you need something more complex than a Texture to render to, you should use this class.\n * Under the hood, all textures you render to have a RenderTarget created on their behalf.\n * @memberof rendering\n */\nexport class RenderTarget\n{\n    /** The default options for a render target */\n    public static defaultOptions: RenderTargetOptions = {\n        /** the width of the RenderTarget */\n        width: 0,\n        /** the height of the RenderTarget */\n        height: 0,\n        /** the resolution of the RenderTarget */\n        resolution: 1,\n        /** an array of textures, or a number indicating how many color textures there should be */\n        colorTextures: 1,\n        /** should this render target have a stencil buffer? */\n        stencil: false,\n        /** should this render target have a depth buffer? */\n        depth: false,\n        /** should this render target be antialiased? */\n        antialias: false, // save on perf by default!\n        /** is this a root element, true if this is gl context owners render target */\n        isRoot: false\n    };\n\n    /** unique id for this render target */\n    public readonly uid: number = uid('renderTarget');\n\n    /**\n     * An array of textures that can be written to by the GPU - mostly this has one texture in Pixi, but you could\n     * write to multiple if required! (eg deferred lighting)\n     */\n    public colorTextures: TextureSource[] = [];\n    /** the stencil and depth buffer will right to this texture in WebGPU */\n    public depthStencilTexture: TextureSource;\n    /** if true, will ensure a stencil buffer is added. For WebGPU, this will automatically create a depthStencilTexture */\n    public stencil: boolean;\n    /** if true, will ensure a depth buffer is added. For WebGPU, this will automatically create a depthStencilTexture */\n    public depth: boolean;\n\n    public dirtyId = 0;\n    public isRoot = false;\n\n    private readonly _size = new Float32Array(2);\n    /** if true, then when the render target is destroyed, it will destroy all the textures that were created for it. */\n    private readonly _managedColorTextures: boolean = false;\n\n    /**\n     * @param [descriptor] - Options for creating a render target.\n     */\n    constructor(descriptor: RenderTargetOptions = {})\n    {\n        descriptor = { ...RenderTarget.defaultOptions, ...descriptor };\n\n        this.stencil = descriptor.stencil;\n        this.depth = descriptor.depth;\n        this.isRoot = descriptor.isRoot;\n\n        if (typeof descriptor.colorTextures === 'number')\n        {\n            this._managedColorTextures = true;\n\n            for (let i = 0; i < descriptor.colorTextures; i++)\n            {\n                this.colorTextures.push(new TextureSource({\n                    width: descriptor.width,\n                    height: descriptor.height,\n                    resolution: descriptor.resolution,\n                    antialias: descriptor.antialias,\n                })\n                );\n            }\n        }\n        else\n        {\n            this.colorTextures = [...descriptor.colorTextures.map((texture) => texture.source)];\n\n            const colorSource = this.colorTexture.source;\n\n            this.resize(colorSource.width, colorSource.height, colorSource._resolution);\n        }\n\n        // the first color texture drives the size of all others..\n        this.colorTexture.source.on('resize', this.onSourceResize, this);\n\n        // TODO should listen for texture destroyed?\n\n        if (descriptor.depthStencilTexture || this.stencil)\n        {\n            // TODO add a test\n            if (descriptor.depthStencilTexture instanceof Texture\n                || descriptor.depthStencilTexture instanceof TextureSource)\n            {\n                this.depthStencilTexture = descriptor.depthStencilTexture.source;\n            }\n            else\n            {\n                this.ensureDepthStencilTexture();\n            }\n        }\n    }\n\n    get size(): [number, number]\n    {\n        const _size = this._size;\n\n        _size[0] = this.pixelWidth;\n        _size[1] = this.pixelHeight;\n\n        return _size as any as [number, number];\n    }\n\n    get width(): number\n    {\n        return this.colorTexture.source.width;\n    }\n\n    get height(): number\n    {\n        return this.colorTexture.source.height;\n    }\n    get pixelWidth(): number\n    {\n        return this.colorTexture.source.pixelWidth;\n    }\n\n    get pixelHeight(): number\n    {\n        return this.colorTexture.source.pixelHeight;\n    }\n\n    get resolution(): number\n    {\n        return this.colorTexture.source._resolution;\n    }\n\n    get colorTexture(): TextureSource\n    {\n        return this.colorTextures[0];\n    }\n\n    protected onSourceResize(source: TextureSource)\n    {\n        this.resize(source.width, source.height, source._resolution, true);\n    }\n\n    /**\n     * This will ensure a depthStencil texture is created for this render target.\n     * Most likely called by the mask system to make sure we have stencil buffer added.\n     * @internal\n     * @ignore\n     */\n    public ensureDepthStencilTexture()\n    {\n        if (!this.depthStencilTexture)\n        {\n            this.depthStencilTexture = new TextureSource({\n                width: this.width,\n                height: this.height,\n                resolution: this.resolution,\n                format: 'depth24plus-stencil8',\n                autoGenerateMipmaps: false,\n                antialias: false,\n                mipLevelCount: 1,\n                // sampleCount: handled by the render target system..\n            });\n        }\n    }\n\n    public resize(width: number, height: number, resolution = this.resolution, skipColorTexture = false)\n    {\n        this.dirtyId++;\n\n        this.colorTextures.forEach((colorTexture, i) =>\n        {\n            if (skipColorTexture && i === 0) return;\n\n            colorTexture.source.resize(width, height, resolution);\n        });\n\n        if (this.depthStencilTexture)\n        {\n            this.depthStencilTexture.source.resize(width, height, resolution);\n        }\n    }\n\n    public destroy()\n    {\n        this.colorTexture.source.off('resize', this.onSourceResize, this);\n\n        if (this._managedColorTextures)\n        {\n            this.colorTextures.forEach((texture) =>\n            {\n                texture.destroy();\n            });\n        }\n\n        if (this.depthStencilTexture)\n        {\n            this.depthStencilTexture.destroy();\n            delete this.depthStencilTexture;\n        }\n    }\n}\n","export const localUniformBit = {\n    name: 'local-uniform-bit',\n    vertex: {\n        header: /* wgsl */`\n\n            struct LocalUniforms {\n                uTransformMatrix:mat3x3<f32>,\n                uColor:vec4<f32>,\n                uRound:f32,\n            }\n\n            @group(1) @binding(0) var<uniform> localUniforms : LocalUniforms;\n        `,\n        main: /* wgsl */`\n            vColor *= localUniforms.uColor;\n            modelMatrix *= localUniforms.uTransformMatrix;\n        `,\n        end: /* wgsl */`\n            if(localUniforms.uRound == 1)\n            {\n                vPosition = vec4(roundPixels(vPosition.xy, globalUniforms.uResolution), vPosition.zw);\n            }\n        `\n    },\n};\n\n// TODO this works, but i think down the road it will be better to manage groups automatically if there are clashes\nexport const localUniformBitGroup2 = {\n    ...localUniformBit,\n    vertex: {\n        ...localUniformBit.vertex,\n        // replace the group!\n        header: localUniformBit.vertex.header.replace('group(1)', 'group(2)'),\n    }\n};\n\nexport const localUniformBitGl = {\n    name: 'local-uniform-bit',\n    vertex: {\n        header: /* glsl */`\n\n            uniform mat3 uTransformMatrix;\n            uniform vec4 uColor;\n            uniform float uRound;\n        `,\n        main: /* glsl */`\n            vColor *= uColor;\n            modelMatrix = uTransformMatrix;\n        `,\n        end: /* glsl */`\n            if(uRound == 1.)\n            {\n                gl_Position.xy = roundPixels(gl_Position.xy, uResolution);\n            }\n        `\n    },\n};\n","import type { BLEND_MODES, CULL_MODES } from './const';\n\nconst blendModeIds = {\n    normal: 0,\n    add: 1,\n    multiply: 2,\n    screen: 3,\n    overlay: 4,\n    erase: 5,\n    'normal-npm': 6,\n    'add-npm': 7,\n    'screen-npm': 8,\n    min: 9,\n    max: 10,\n};\nconst BLEND = 0;\nconst OFFSET = 1;\nconst CULLING = 2;\nconst DEPTH_TEST = 3;\nconst WINDING = 4;\nconst DEPTH_MASK = 5;\n\n/**\n * This is a WebGL state, and is is passed to {@link StateSystem}.\n *\n * Each mesh rendered may require WebGL to be in a different state.\n * For example you may want different blend mode or to enable polygon offsets\n * @memberof rendering\n */\nexport class State\n{\n    /**\n     * The data is a unique number based on the states settings.\n     * This lets us quickly compare states with a single number rather than looking\n     * at all the individual settings.\n     */\n    public data: number;\n    public _blendModeId: number;\n    private _blendMode: BLEND_MODES;\n    private _polygonOffset: number;\n\n    constructor()\n    {\n        this.data = 0;\n\n        this.blendMode = 'normal';\n        this.polygonOffset = 0;\n\n        this.blend = true;\n        this.depthMask = true;\n    }\n\n    /**\n     * Activates blending of the computed fragment color values.\n     * @default true\n     */\n    get blend(): boolean\n    {\n        return !!(this.data & (1 << BLEND));\n    }\n\n    set blend(value: boolean)\n    {\n        if (!!(this.data & (1 << BLEND)) !== value)\n        {\n            this.data ^= (1 << BLEND);\n        }\n    }\n\n    /**\n     * Activates adding an offset to depth values of polygon's fragments\n     * @default false\n     */\n    get offsets(): boolean\n    {\n        return !!(this.data & (1 << OFFSET));\n    }\n\n    set offsets(value: boolean)\n    {\n        if (!!(this.data & (1 << OFFSET)) !== value)\n        {\n            this.data ^= (1 << OFFSET);\n        }\n    }\n\n    /** The culling settings for this state none - No culling back - Back face culling front - Front face culling */\n    set cullMode(value: CULL_MODES)\n    {\n        if (value === 'none')\n        {\n            this.culling = false;\n\n            return;\n        }\n\n        this.culling = true;\n        this.clockwiseFrontFace = value === 'front';\n    }\n\n    get cullMode(): CULL_MODES\n    {\n        if (!this.culling)\n        {\n            return 'none';\n        }\n\n        return this.clockwiseFrontFace ? 'front' : 'back';\n    }\n\n    /**\n     * Activates culling of polygons.\n     * @default false\n     */\n    get culling(): boolean\n    {\n        return !!(this.data & (1 << CULLING));\n    }\n\n    set culling(value: boolean)\n    {\n        if (!!(this.data & (1 << CULLING)) !== value)\n        {\n            this.data ^= (1 << CULLING);\n        }\n    }\n\n    /**\n     * Activates depth comparisons and updates to the depth buffer.\n     * @default false\n     */\n    get depthTest(): boolean\n    {\n        return !!(this.data & (1 << DEPTH_TEST));\n    }\n\n    set depthTest(value: boolean)\n    {\n        if (!!(this.data & (1 << DEPTH_TEST)) !== value)\n        {\n            this.data ^= (1 << DEPTH_TEST);\n        }\n    }\n\n    /**\n     * Enables or disables writing to the depth buffer.\n     * @default true\n     */\n    get depthMask(): boolean\n    {\n        return !!(this.data & (1 << DEPTH_MASK));\n    }\n\n    set depthMask(value: boolean)\n    {\n        if (!!(this.data & (1 << DEPTH_MASK)) !== value)\n        {\n            this.data ^= (1 << DEPTH_MASK);\n        }\n    }\n\n    /**\n     * Specifies whether or not front or back-facing polygons can be culled.\n     * @default false\n     */\n    get clockwiseFrontFace(): boolean\n    {\n        return !!(this.data & (1 << WINDING));\n    }\n\n    set clockwiseFrontFace(value: boolean)\n    {\n        if (!!(this.data & (1 << WINDING)) !== value)\n        {\n            this.data ^= (1 << WINDING);\n        }\n    }\n\n    /**\n     * The blend mode to be applied when this state is set. Apply a value of `normal` to reset the blend mode.\n     * Setting this mode to anything other than NO_BLEND will automatically switch blending on.\n     * @default 'normal'\n     */\n    get blendMode(): BLEND_MODES\n    {\n        return this._blendMode;\n    }\n\n    set blendMode(value: BLEND_MODES)\n    {\n        this.blend = (value !== 'none');\n        this._blendMode = value;\n        this._blendModeId = blendModeIds[value as keyof typeof blendModeIds] || 0;\n    }\n\n    /**\n     * The polygon offset. Setting this property to anything other than 0 will automatically enable polygon offset fill.\n     * @default 0\n     */\n    get polygonOffset(): number\n    {\n        return this._polygonOffset;\n    }\n\n    set polygonOffset(value: number)\n    {\n        this.offsets = !!value;\n        this._polygonOffset = value;\n    }\n\n    // #if _DEBUG\n    public toString(): string\n    {\n        return `[pixi.js/core:State `\n            + `blendMode=${this.blendMode} `\n            + `clockwiseFrontFace=${this.clockwiseFrontFace} `\n            + `culling=${this.culling} `\n            + `depthMask=${this.depthMask} `\n            + `polygonOffset=${this.polygonOffset}`\n            + `]`;\n    }\n    // #endif\n\n    /**\n     * A quickly getting an instance of a State that is configured for 2d rendering.\n     * @returns a new State with values set for 2d rendering\n     */\n    public static for2d(): State\n    {\n        const state = new State();\n\n        state.depthTest = false;\n        state.blend = true;\n\n        return state;\n    }\n\n    public static default2d = State.for2d();\n}\n\n","import type { Matrix } from '../../maths/matrix/Matrix';\nimport type { Batch, Batcher } from '../../rendering/batcher/shared/Batcher';\nimport type { DefaultBatchableQuadElement } from '../../rendering/batcher/shared/DefaultBatcher';\nimport type { Topology } from '../../rendering/renderers/shared/geometry/const';\nimport type { Texture } from '../../rendering/renderers/shared/texture/Texture';\nimport type { BoundsData } from '../container/bounds/Bounds';\nimport type { Container } from '../container/Container';\n\n/**\n * A batchable sprite object.\n * @ignore\n */\nexport class BatchableSprite implements DefaultBatchableQuadElement\n{\n    public batcherName = 'default';\n    public topology: Topology = 'triangle-list';\n\n    // batch specific..\n    public readonly attributeSize = 4;\n    public readonly indexSize = 6;\n    public readonly packAsQuad = true;\n\n    public transform: Matrix;\n\n    public renderable: Container;\n    public texture: Texture;\n    public bounds: BoundsData;\n\n    public roundPixels: 0 | 1 = 0;\n\n    public _indexStart: number;\n    public _textureId: number;\n    public _attributeStart = 0; // location in the buffer\n    public _batcher: Batcher = null;\n    public _batch: Batch = null;\n\n    get blendMode() { return this.renderable.groupBlendMode; }\n    get color() { return this.renderable.groupColorAlpha; }\n\n    public reset()\n    {\n        this.renderable = null;\n        this.texture = null;\n        this._batcher = null;\n        this._batch = null;\n        this.bounds = null;\n    }\n}\n","export const textureBit = {\n    name: 'texture-bit',\n    vertex: {\n        header: /* wgsl */`\n\n        struct TextureUniforms {\n            uTextureMatrix:mat3x3<f32>,\n        }\n\n        @group(2) @binding(2) var<uniform> textureUniforms : TextureUniforms;\n        `,\n        main: /* wgsl */`\n            uv = (textureUniforms.uTextureMatrix * vec3(uv, 1.0)).xy;\n        `\n    },\n    fragment: {\n        header: /* wgsl */`\n            @group(2) @binding(0) var uTexture: texture_2d<f32>;\n            @group(2) @binding(1) var uSampler: sampler;\n\n         \n        `,\n        main: /* wgsl */`\n            outColor = textureSample(uTexture, uSampler, vUV);\n        `\n    }\n};\n\nexport const textureBitGl = {\n    name: 'texture-bit',\n    vertex: {\n        header: /* glsl */`\n            uniform mat3 uTextureMatrix;\n        `,\n        main: /* glsl */`\n            uv = (uTextureMatrix * vec3(uv, 1.0)).xy;\n        `\n    },\n    fragment: {\n        header: /* glsl */`\n        uniform sampler2D uTexture;\n\n         \n        `,\n        main: /* glsl */`\n            outColor = texture(uTexture, vUV);\n        `\n    }\n};\n\n","import { warn } from '../../../../../utils/logging/warn';\nimport { getAttributeInfoFromFormat } from '../../../shared/geometry/utils/getAttributeInfoFromFormat';\n\nimport type { Geometry } from '../../../shared/geometry/Geometry';\nimport type { ExtractedAttributeData } from './extractAttributesFromGlProgram';\n\n/**\n * This function looks at the attribute information provided to the geometry and attempts\n * to fill in an gaps. WE do this by looking at the extracted data from the shader and\n * making best guesses.\n *\n * Most of th etime users don't need to provide all the attribute info beyond the data itself, so we\n * can fill in the gaps for them. If you are using attributes in a more advanced way, you can\n * don't forget to add all the info at creation!\n * @param geometry - the geometry to ensure attributes for\n * @param extractedData - the extracted data from the shader\n */\nexport function ensureAttributes(\n    geometry: Geometry,\n    extractedData: Record<string, ExtractedAttributeData>\n): void\n{\n    for (const i in geometry.attributes)\n    {\n        const attribute = geometry.attributes[i];\n        const attributeData = extractedData[i];\n\n        if (attributeData)\n        {\n            attribute.format ??= attributeData.format;\n            attribute.offset ??= attributeData.offset;\n            attribute.instance ??= attributeData.instance;\n        }\n        else\n        {\n            // eslint-disable-next-line max-len\n            warn(`Attribute ${i} is not present in the shader, but is present in the geometry. Unable to infer attribute details.`);\n        }\n    }\n\n    ensureStartAndStride(geometry);\n}\n\nfunction ensureStartAndStride(geometry: Geometry): void\n{\n    const { buffers, attributes } = geometry;\n\n    const tempStride: Record<string, number> = {};\n    const tempStart: Record<string, number> = {};\n\n    for (const j in buffers)\n    {\n        const buffer = buffers[j];\n\n        tempStride[buffer.uid] = 0;\n        tempStart[buffer.uid] = 0;\n    }\n\n    for (const j in attributes)\n    {\n        const attribute = attributes[j];\n\n        tempStride[attribute.buffer.uid] += getAttributeInfoFromFormat(attribute.format).stride;\n    }\n\n    for (const j in attributes)\n    {\n        const attribute = attributes[j];\n\n        attribute.stride ??= tempStride[attribute.buffer.uid];\n\n        attribute.start ??= tempStart[attribute.buffer.uid];\n\n        tempStart[attribute.buffer.uid] += getAttributeInfoFromFormat(attribute.format).stride;\n    }\n}\n","import { CanvasSource } from '../sources/CanvasSource';\nimport { Texture } from '../Texture';\n\nimport type { ICanvas } from '../../../../../environment/canvas/ICanvas';\nimport type { CanvasSourceOptions } from '../sources/CanvasSource';\n\nconst canvasCache: Map<ICanvas, Texture<CanvasSource>> = new Map();\n\nexport function getCanvasTexture(canvas: ICanvas, options?: CanvasSourceOptions): Texture<CanvasSource>\n{\n    if (!canvasCache.has(canvas))\n    {\n        const texture = new Texture({\n            source: new CanvasSource({\n                resource: canvas,\n                ...options,\n            })\n        });\n\n        const onDestroy = () =>\n        {\n            if (canvasCache.get(canvas) === texture)\n            {\n                canvasCache.delete(canvas);\n            }\n        };\n\n        texture.once('destroy', onDestroy);\n        texture.source.once('destroy', onDestroy);\n\n        canvasCache.set(canvas, texture);\n    }\n\n    return canvasCache.get(canvas);\n}\n\nexport function hasCachedCanvasTexture(canvas: ICanvas): boolean\n{\n    return canvasCache.has(canvas);\n}\n","import type { UNIFORM_TYPES_SINGLE } from '../types';\n\nfunction loopMatrix(col: number, row: number)\n{\n    const total = col * row;\n\n    return `\n        for (let i = 0; i < ${total}; i++) {\n            data[offset + (((i / ${col})|0) * 4) + (i % ${col})] = v[i];\n        }\n    `;\n}\n\nexport const uboSyncFunctionsSTD40: Record<UNIFORM_TYPES_SINGLE, string> = {\n    f32: `\n        data[offset] = v;`,\n    i32: `\n        dataInt32[offset] = v;`,\n    'vec2<f32>': `\n        data[offset] = v[0];\n        data[offset + 1] = v[1];`,\n    'vec3<f32>': `\n        data[offset] = v[0];\n        data[offset + 1] = v[1];\n        data[offset + 2] = v[2];`,\n    'vec4<f32>': `\n        data[offset] = v[0];\n        data[offset + 1] = v[1];\n        data[offset + 2] = v[2];\n        data[offset + 3] = v[3];`,\n    'vec2<i32>': `\n        dataInt32[offset] = v[0];\n        dataInt32[offset + 1] = v[1];`,\n    'vec3<i32>': `\n        dataInt32[offset] = v[0];\n        dataInt32[offset + 1] = v[1];\n        dataInt32[offset + 2] = v[2];`,\n    'vec4<i32>': `\n        dataInt32[offset] = v[0];\n        dataInt32[offset + 1] = v[1];\n        dataInt32[offset + 2] = v[2];\n        dataInt32[offset + 3] = v[3];`,\n    'mat2x2<f32>': `\n        data[offset] = v[0];\n        data[offset + 1] = v[1];\n        data[offset + 4] = v[2];\n        data[offset + 5] = v[3];`,\n    'mat3x3<f32>': `\n        data[offset] = v[0];\n        data[offset + 1] = v[1];\n        data[offset + 2] = v[2];\n        data[offset + 4] = v[3];\n        data[offset + 5] = v[4];\n        data[offset + 6] = v[5];\n        data[offset + 8] = v[6];\n        data[offset + 9] = v[7];\n        data[offset + 10] = v[8];`,\n    'mat4x4<f32>': `\n        for (let i = 0; i < 16; i++) {\n            data[offset + i] = v[i];\n        }`,\n    'mat3x2<f32>': loopMatrix(3, 2),\n    'mat4x2<f32>': loopMatrix(4, 2),\n    'mat2x3<f32>': loopMatrix(2, 3),\n    'mat4x3<f32>': loopMatrix(4, 3),\n    'mat2x4<f32>': loopMatrix(2, 4),\n    'mat3x4<f32>': loopMatrix(3, 4),\n};\n\nexport const uboSyncFunctionsWGSL: Record<UNIFORM_TYPES_SINGLE, string> = {\n    ...uboSyncFunctionsSTD40,\n    'mat2x2<f32>': `\n        data[offset] = v[0];\n        data[offset + 1] = v[1];\n        data[offset + 2] = v[2];\n        data[offset + 3] = v[3];\n    `,\n};\n","import { STENCIL_MODES } from '../../shared/state/const';\n\nexport interface StencilState\n{\n    stencilWriteMask?: number\n    stencilReadMask?: number;\n    stencilFront?: {\n        compare: 'always' | 'equal' | 'not-equal';\n        passOp: 'increment-clamp' | 'decrement-clamp' | 'keep' | 'replace';\n    },\n    stencilBack?: {\n        compare: 'always' | 'equal' | 'not-equal';\n        passOp: 'increment-clamp' | 'decrement-clamp' | 'keep' | 'replace';\n    }\n}\n\nexport const GpuStencilModesToPixi: StencilState[] = [];\n\nGpuStencilModesToPixi[STENCIL_MODES.NONE] = undefined;\n\nGpuStencilModesToPixi[STENCIL_MODES.DISABLED] = {\n    stencilWriteMask: 0,\n    stencilReadMask: 0,\n};\n\nGpuStencilModesToPixi[STENCIL_MODES.RENDERING_MASK_ADD] = {\n    stencilFront: {\n        compare: 'equal',\n        passOp: 'increment-clamp',\n    },\n    stencilBack: {\n        compare: 'equal',\n        passOp: 'increment-clamp',\n    },\n};\n\nGpuStencilModesToPixi[STENCIL_MODES.RENDERING_MASK_REMOVE] = {\n    stencilFront: {\n        compare: 'equal',\n        passOp: 'decrement-clamp',\n    },\n    stencilBack: {\n        compare: 'equal',\n        passOp: 'decrement-clamp',\n    },\n};\n\nGpuStencilModesToPixi[STENCIL_MODES.MASK_ACTIVE] = {\n    stencilWriteMask: 0,\n    stencilFront: {\n        compare: 'equal',\n        passOp: 'keep',\n    },\n    stencilBack: {\n        compare: 'equal',\n        passOp: 'keep',\n    },\n};\n\nGpuStencilModesToPixi[STENCIL_MODES.INVERSE_MASK_ACTIVE] = {\n    stencilWriteMask: 0,\n    stencilFront: {\n        compare: 'not-equal',\n        passOp: 'replace',\n    },\n    stencilBack: {\n        compare: 'not-equal',\n        passOp: 'replace',\n    },\n};\n","import { ExtensionType } from '../../extensions/Extensions';\n\nimport type { InstructionSet } from '../../rendering/renderers/shared/instructions/InstructionSet';\nimport type { InstructionPipe, RenderPipe } from '../../rendering/renderers/shared/instructions/RenderPipe';\nimport type { Renderer } from '../../rendering/renderers/types';\nimport type { RenderContainer } from './RenderContainer';\n\n/**\n * The CustomRenderPipe is a render pipe that allows for custom rendering logic for your renderable objects.\n * @example\n * import { RenderContainer } from 'pixi.js';\n *\n * const renderContainer = new RenderContainer(\n * (renderer) =>  {\n *     renderer.clear({\n *       clearColor: 'green', // clear the screen to green when rendering this item\n *     });\n * })\n * @memberof rendering\n */\nexport class CustomRenderPipe implements InstructionPipe<RenderContainer>, RenderPipe<RenderContainer>\n{\n    public static extension = {\n        type: [\n            ExtensionType.WebGLPipes,\n            ExtensionType.WebGPUPipes,\n            ExtensionType.CanvasPipes,\n        ],\n        name: 'customRender',\n    } as const;\n\n    private _renderer: Renderer;\n\n    constructor(renderer: Renderer)\n    {\n        this._renderer = renderer;\n    }\n\n    public updateRenderable() { /** empty */ }\n    public destroyRenderable() { /** empty */ }\n    public validateRenderable() { return false; }\n\n    public addRenderable(container: RenderContainer, instructionSet: InstructionSet): void\n    {\n        this._renderer.renderPipes.batch.break(instructionSet);\n\n        instructionSet.add(container);\n    }\n\n    public execute(container: RenderContainer)\n    {\n        if (!container.isRenderable) return;\n\n        container.render(this._renderer);\n    }\n\n    public destroy(): void\n    {\n        this._renderer = null;\n    }\n}\n","import type { InstructionPipe } from '../../../rendering/renderers/shared/instructions/RenderPipe';\nimport type { RenderPipes } from '../../../rendering/renderers/types';\nimport type { RenderGroup } from '../RenderGroup';\n\nexport function executeInstructions(renderGroup: RenderGroup, renderer: RenderPipes)\n{\n    const instructionSet = renderGroup.instructionSet;\n    const instructions = instructionSet.instructions;\n\n    for (let i = 0; i < instructionSet.instructionSize; i++)\n    {\n        const instruction = instructions[i];\n\n        (renderer[instruction.renderPipeId as keyof RenderPipes] as InstructionPipe<any>).execute(instruction);\n    }\n}\n","import { ExtensionType } from '../../extensions/Extensions';\nimport { Matrix } from '../../maths/matrix/Matrix';\nimport { BigPool } from '../../utils/pool/PoolGroup';\nimport { BatchableSprite } from '../sprite/BatchableSprite';\nimport { executeInstructions } from './utils/executeInstructions';\n\nimport type { InstructionSet } from '../../rendering/renderers/shared/instructions/InstructionSet';\nimport type { InstructionPipe } from '../../rendering/renderers/shared/instructions/RenderPipe';\nimport type { Renderer } from '../../rendering/renderers/types';\nimport type { RenderGroup } from './RenderGroup';\n\nconst tempMatrix = new Matrix();\n\nexport class RenderGroupPipe implements InstructionPipe<RenderGroup>\n{\n    public static extension = {\n        type: [\n            ExtensionType.WebGLPipes,\n            ExtensionType.WebGPUPipes,\n            ExtensionType.CanvasPipes,\n        ],\n        name: 'renderGroup',\n    } as const;\n\n    private _renderer: Renderer;\n\n    constructor(renderer: Renderer)\n    {\n        this._renderer = renderer;\n    }\n\n    public addRenderGroup(renderGroup: RenderGroup, instructionSet: InstructionSet): void\n    {\n        if (renderGroup.isCachedAsTexture)\n        {\n            this._addRenderableCacheAsTexture(renderGroup, instructionSet);\n        }\n        else\n        {\n            this._addRenderableDirect(renderGroup, instructionSet);\n        }\n    }\n\n    public execute(renderGroup: RenderGroup)\n    {\n        if (!renderGroup.isRenderable) return;\n\n        if (renderGroup.isCachedAsTexture)\n        {\n            this._executeCacheAsTexture(renderGroup);\n        }\n        else\n        {\n            this._executeDirect(renderGroup);\n        }\n    }\n\n    public destroy(): void\n    {\n        this._renderer = null;\n    }\n\n    private _addRenderableDirect(renderGroup: RenderGroup, instructionSet: InstructionSet): void\n    {\n        this._renderer.renderPipes.batch.break(instructionSet);\n\n        if (renderGroup._batchableRenderGroup)\n        {\n            BigPool.return(renderGroup._batchableRenderGroup);\n            renderGroup._batchableRenderGroup = null;\n        }\n\n        instructionSet.add(renderGroup);\n    }\n\n    private _addRenderableCacheAsTexture(renderGroup: RenderGroup, instructionSet: InstructionSet): void\n    {\n        const batchableRenderGroup = renderGroup._batchableRenderGroup ??= BigPool.get(BatchableSprite);\n\n        batchableRenderGroup.renderable = renderGroup.root;\n        batchableRenderGroup.transform = renderGroup.root.relativeGroupTransform;\n        batchableRenderGroup.texture = renderGroup.texture;\n        batchableRenderGroup.bounds = renderGroup._textureBounds;\n\n        instructionSet.add(renderGroup);\n        this._renderer.renderPipes.batch.addToBatch(batchableRenderGroup, instructionSet);\n    }\n\n    private _executeCacheAsTexture(renderGroup: RenderGroup): void\n    {\n        if (renderGroup.textureNeedsUpdate)\n        {\n            renderGroup.textureNeedsUpdate = false;\n\n            const worldTransformMatrix = tempMatrix\n                .identity()\n                .translate(\n                    -renderGroup._textureBounds.x,\n                    -renderGroup._textureBounds.y\n                );\n\n            this._renderer.renderTarget.push(renderGroup.texture, true, null, renderGroup.texture.frame);\n\n            this._renderer.globalUniforms.push({\n                worldTransformMatrix,\n                worldColor: 0xFFFFFFFF,\n            });\n\n            executeInstructions(renderGroup, this._renderer.renderPipes);\n\n            this._renderer.renderTarget.finishRenderPass();\n\n            this._renderer.renderTarget.pop();\n            this._renderer.globalUniforms.pop();\n        }\n\n        renderGroup._batchableRenderGroup._batcher.updateElement(renderGroup._batchableRenderGroup);\n        renderGroup._batchableRenderGroup._batcher.geometry.buffers[0].update();\n    }\n\n    private _executeDirect(renderGroup: RenderGroup): void\n    {\n        this._renderer.globalUniforms.push({\n            worldTransformMatrix: renderGroup.inverseParentTextureTransform,\n            worldColor: renderGroup.worldColorAlpha,\n        });\n\n        executeInstructions(renderGroup, this._renderer.renderPipes);\n\n        this._renderer.globalUniforms.pop();\n    }\n}\n","/**\n * nulls all slots in an array from a certain index.\n * assume that when a null item is hit, the rest are also null.\n * Which will be the case for where this is used!\n * @param list - the array to clean\n * @param index - the index to start from\n */\nexport function clearList(list: Array<unknown>, index?: number)\n{\n    index ||= 0;\n\n    for (let j = index; j < list.length; j++)\n    {\n        if (list[j])\n        {\n            list[j] = null;\n        }\n        else\n        {\n            break;\n        }\n    }\n}\n","import { Container, UPDATE_BLEND, UPDATE_COLOR, UPDATE_VISIBLE } from '../Container';\nimport { clearList } from './clearList';\nimport { multiplyColors } from './multiplyColors';\n\nimport type { ViewContainer } from '../../view/ViewContainer';\nimport type { RenderGroup } from '../RenderGroup';\n\nconst tempContainer = new Container();\nconst UPDATE_BLEND_COLOR_VISIBLE = UPDATE_VISIBLE | UPDATE_COLOR | UPDATE_BLEND;\n\nexport function updateRenderGroupTransforms(renderGroup: RenderGroup, updateChildRenderGroups = false)\n{\n    updateRenderGroupTransform(renderGroup);\n\n    const childrenToUpdate = renderGroup.childrenToUpdate;\n\n    const updateTick = renderGroup.updateTick++;\n\n    for (const j in childrenToUpdate)\n    {\n        const renderGroupDepth = Number(j);\n\n        const childrenAtDepth = childrenToUpdate[j];\n\n        const list = childrenAtDepth.list;\n        const index = childrenAtDepth.index;\n\n        for (let i = 0; i < index; i++)\n        {\n            const child = list[i];\n\n            // check that these things match our layer and depth - if the renderGroup does not match,\n            // the child has been re-parented into another rendergroup since it asked to be updated so we can ignore it here\n            // secondly if the relativeRenderGroupDepth has changed, then the it means it will have been nested at a\n            // different different level in the render group - so we can wait for the update that does in fact match\n            if (child.parentRenderGroup === renderGroup && child.relativeRenderGroupDepth === renderGroupDepth)\n            {\n                updateTransformAndChildren(child, updateTick, 0);\n            }\n        }\n\n        clearList(list, index);\n\n        childrenAtDepth.index = 0;\n    }\n\n    if (updateChildRenderGroups)\n    {\n        for (let i = 0; i < renderGroup.renderGroupChildren.length; i++)\n        {\n            updateRenderGroupTransforms(renderGroup.renderGroupChildren[i], updateChildRenderGroups);\n        }\n    }\n}\n\nexport function updateRenderGroupTransform(renderGroup: RenderGroup)\n{\n    const root = renderGroup.root;\n\n    let worldAlpha;\n\n    if (renderGroup.renderGroupParent)\n    {\n        const renderGroupParent = renderGroup.renderGroupParent;\n\n        renderGroup.worldTransform.appendFrom(\n            root.relativeGroupTransform,\n            renderGroupParent.worldTransform,\n        );\n\n        renderGroup.worldColor = multiplyColors(\n            root.groupColor,\n            renderGroupParent.worldColor,\n        );\n\n        worldAlpha = root.groupAlpha * renderGroupParent.worldAlpha;\n    }\n    else\n    {\n        renderGroup.worldTransform.copyFrom(root.localTransform);\n        renderGroup.worldColor = root.localColor;\n        worldAlpha = root.localAlpha;\n    }\n\n    // eslint-disable-next-line no-nested-ternary\n    worldAlpha = worldAlpha < 0 ? 0 : (worldAlpha > 1 ? 1 : worldAlpha);\n    renderGroup.worldAlpha = worldAlpha;\n\n    renderGroup.worldColorAlpha = renderGroup.worldColor\n            + (((worldAlpha * 255) | 0) << 24);\n}\n\nexport function updateTransformAndChildren(container: Container, updateTick: number, updateFlags: number)\n{\n    if (updateTick === container.updateTick) return;\n    container.updateTick = updateTick;\n\n    container.didChange = false;\n\n    const localTransform = container.localTransform;\n\n    container.updateLocalTransform();\n\n    const parent = container.parent;\n\n    if ((parent && !parent.renderGroup))\n    {\n        updateFlags |= container._updateFlags;\n\n        container.relativeGroupTransform.appendFrom(\n            localTransform,\n            parent.relativeGroupTransform,\n        );\n\n        if (updateFlags & UPDATE_BLEND_COLOR_VISIBLE)\n        {\n            updateColorBlendVisibility(container, parent, updateFlags);\n        }\n    }\n    else\n    {\n        updateFlags = container._updateFlags;\n\n        container.relativeGroupTransform.copyFrom(localTransform);\n\n        if (updateFlags & UPDATE_BLEND_COLOR_VISIBLE)\n        {\n            updateColorBlendVisibility(container, tempContainer, updateFlags);\n        }\n    }\n\n    // don't update children if its a layer..\n    if (!container.renderGroup)\n    {\n        const children = container.children;\n        const length = children.length;\n\n        for (let i = 0; i < length; i++)\n        {\n            updateTransformAndChildren(children[i], updateTick, updateFlags);\n        }\n\n        const renderGroup = container.parentRenderGroup;\n        const renderable = container as ViewContainer;\n\n        if (renderable.renderPipeId && !renderGroup.structureDidChange)\n        {\n            renderGroup.updateRenderable(renderable);\n        }\n    }\n}\n\nfunction updateColorBlendVisibility(\n    container: Container,\n    parent: Container,\n    updateFlags: number,\n): void\n{\n    if (updateFlags & UPDATE_COLOR)\n    {\n        container.groupColor = multiplyColors(\n            container.localColor,\n            parent.groupColor\n        );\n\n        let groupAlpha = container.localAlpha * parent.groupAlpha;\n\n        // eslint-disable-next-line no-nested-ternary\n        groupAlpha = groupAlpha < 0 ? 0 : (groupAlpha > 1 ? 1 : groupAlpha);\n\n        container.groupAlpha = groupAlpha;\n        container.groupColorAlpha = container.groupColor + (((groupAlpha * 255) | 0) << 24);\n    }\n\n    if (updateFlags & UPDATE_BLEND)\n    {\n        container.groupBlendMode = container.localBlendMode === 'inherit' ? parent.groupBlendMode : container.localBlendMode;\n    }\n\n    if (updateFlags & UPDATE_VISIBLE)\n    {\n        container.globalDisplayStatus = container.localDisplayStatus & parent.globalDisplayStatus;\n    }\n\n    container._updateFlags = 0;\n}\n\n","import { ExtensionType } from '../../extensions/Extensions';\nimport { Matrix } from '../../maths/matrix/Matrix';\nimport { TexturePool } from '../../rendering/renderers/shared/texture/TexturePool';\nimport { Bounds } from './bounds/Bounds';\nimport { clearList } from './utils/clearList';\nimport { executeInstructions } from './utils/executeInstructions';\nimport { updateRenderGroupTransforms } from './utils/updateRenderGroupTransforms';\nimport { validateRenderables } from './utils/validateRenderables';\n\nimport type { WebGPURenderer } from '../../rendering/renderers/gpu/WebGPURenderer';\nimport type { System } from '../../rendering/renderers/shared/system/System';\nimport type { Renderer, RenderPipes } from '../../rendering/renderers/types';\nimport type { ViewContainer } from '../view/ViewContainer';\nimport type { Container } from './Container';\nimport type { RenderGroup } from './RenderGroup';\n\nconst tempMatrix = new Matrix();\n\n/**\n * The view system manages the main canvas that is attached to the DOM.\n * This main role is to deal with how the holding the view reference and dealing with how it is resized.\n * @memberof rendering\n */\nexport class RenderGroupSystem implements System\n{\n    /** @ignore */\n    public static extension = {\n        type: [\n            ExtensionType.WebGLSystem,\n            ExtensionType.WebGPUSystem,\n            ExtensionType.CanvasSystem,\n        ],\n        name: 'renderGroup',\n    } as const;\n\n    private readonly _renderer: Renderer;\n\n    constructor(renderer: Renderer)\n    {\n        this._renderer = renderer;\n    }\n\n    protected render({ container, transform }: {container: Container, transform: Matrix}): void\n    {\n        // we need to save the parent and renderGroupParent, so we can restore them later\n        const parent = container.parent;\n        const renderGroupParent = container.renderGroup.renderGroupParent;\n\n        // we set the transforms and parents to null, so we can render the container without any transforms\n        container.parent = null;\n        container.renderGroup.renderGroupParent = null;\n\n        const renderer = this._renderer;\n\n        // collect all the renderGroups in the scene and then render them one by one..\n        let originalLocalTransform: Matrix = tempMatrix;\n\n        if (transform)\n        {\n            originalLocalTransform = originalLocalTransform.copyFrom(container.renderGroup.localTransform);\n            container.renderGroup.localTransform.copyFrom(transform);\n        }\n\n        //  this._assignTop(container.renderGroup, null);\n        const renderPipes = (renderer as WebGPURenderer).renderPipes;\n\n        this._updateCachedRenderGroups(container.renderGroup, null);\n\n        this._updateRenderGroups(container.renderGroup);\n\n        renderer.globalUniforms.start({\n            worldTransformMatrix: transform ? container.renderGroup.localTransform : container.renderGroup.worldTransform,\n            worldColor: container.renderGroup.worldColorAlpha,\n        });\n\n        executeInstructions(container.renderGroup, renderPipes);\n\n        // TODO need to add some events / runners for things like this to hook up to\n        if (renderPipes.uniformBatch)\n        {\n            renderPipes.uniformBatch.renderEnd();\n        }\n\n        // now return the transforms back to normal..\n        if (transform)\n        {\n            container.renderGroup.localTransform.copyFrom(originalLocalTransform);\n        }\n\n        container.parent = parent;\n        container.renderGroup.renderGroupParent = renderGroupParent;\n    }\n\n    public destroy()\n    {\n        (this._renderer as null) = null;\n    }\n\n    private _updateCachedRenderGroups(renderGroup: RenderGroup, closestCacheAsTexture: RenderGroup | null): void\n    {\n        if (renderGroup.isCachedAsTexture)\n        {\n            // early out as nothing further needs to be updated!\n            if (!renderGroup.updateCacheTexture) return;\n\n            closestCacheAsTexture = renderGroup;\n        }\n\n        renderGroup._parentCacheAsTextureRenderGroup = closestCacheAsTexture;\n\n        // now check the cacheAsTexture stuff...\n        for (let i = renderGroup.renderGroupChildren.length - 1; i >= 0; i--)\n        {\n            this._updateCachedRenderGroups(renderGroup.renderGroupChildren[i], closestCacheAsTexture);\n        }\n\n        renderGroup.invalidateMatrices();\n\n        if (renderGroup.isCachedAsTexture)\n        {\n            if (renderGroup.textureNeedsUpdate)\n            {\n                // lets get the texture ready for rendering\n                // but the rendering will not happen until the renderGroup is rendered!\n                // We also want to know now, what the bounds of the texture will be.\n                // as if the texture changes, we need to invalidate the parent render group!\n                const bounds = renderGroup.root.getLocalBounds();\n\n                bounds.ceil();\n\n                const lastTexture = renderGroup.texture;\n\n                if (renderGroup.texture)\n                {\n                    TexturePool.returnTexture(renderGroup.texture);\n                }\n\n                const renderer = this._renderer;\n                const resolution = renderGroup.textureOptions.resolution || renderer.view.resolution;\n                const antialias = renderGroup.textureOptions.antialias ?? renderer.view.antialias;\n\n                renderGroup.texture = TexturePool.getOptimalTexture(\n                    bounds.width,\n                    bounds.height,\n                    resolution,\n                    antialias\n                );\n\n                renderGroup._textureBounds ||= new Bounds();\n                renderGroup._textureBounds.copyFrom(bounds);\n\n                if (lastTexture !== renderGroup.texture)\n                {\n                    if (renderGroup.renderGroupParent)\n                    {\n                        renderGroup.renderGroupParent.structureDidChange = true;\n                    }\n                }\n            }\n        }\n        else if (renderGroup.texture)\n        {\n            TexturePool.returnTexture(renderGroup.texture);\n            renderGroup.texture = null;\n        }\n    }\n\n    private _updateRenderGroups(renderGroup: RenderGroup): void\n    {\n        const renderer = this._renderer;\n        const renderPipes = renderer.renderPipes;\n\n        renderGroup.runOnRender(renderer);\n\n        renderGroup.instructionSet.renderPipes = renderPipes;\n\n        if (!renderGroup.structureDidChange)\n        {\n            // phase 1 - validate all the renderables\n            validateRenderables(renderGroup, renderPipes);\n        }\n        else\n        {\n            clearList(renderGroup.childrenRenderablesToUpdate.list, 0);\n        }\n\n        // phase 2 - update all the transforms\n        // including updating the renderables..\n        updateRenderGroupTransforms(renderGroup);\n\n        if (renderGroup.structureDidChange)\n        {\n            renderGroup.structureDidChange = false;\n\n            // build the renderables\n            this._buildInstructions(renderGroup, renderer);\n        }\n        else\n        {\n            // update remaining renderables\n            this._updateRenderables(renderGroup);\n        }\n\n        // reset the renderables to update\n        renderGroup.childrenRenderablesToUpdate.index = 0;\n\n        // upload all the things!\n        renderer.renderPipes.batch.upload(renderGroup.instructionSet);\n\n        // early out if it's a texture and it hasn't changed!\n        if (renderGroup.isCachedAsTexture && !renderGroup.textureNeedsUpdate) return;\n\n        for (let i = 0; i < renderGroup.renderGroupChildren.length; i++)\n        {\n            this._updateRenderGroups(renderGroup.renderGroupChildren[i]);\n        }\n    }\n\n    private _updateRenderables(renderGroup: RenderGroup)\n    {\n        const { list, index } = renderGroup.childrenRenderablesToUpdate;\n\n        for (let i = 0; i < index; i++)\n        {\n            const container = list[i];\n\n            if (container.didViewUpdate)\n            {\n                renderGroup.updateRenderable(container as ViewContainer);\n            }\n        }\n\n        clearList(list, index);\n    }\n\n    /**\n     * @param renderGroup\n     * @param renderPipes\n     * @deprecated since 8.3.0\n     */\n    private _buildInstructions(renderGroup: RenderGroup, renderPipes: RenderPipes): void;\n    private _buildInstructions(renderGroup: RenderGroup, renderer: Renderer): void;\n    private _buildInstructions(renderGroup: RenderGroup, rendererOrPipes: RenderPipes | Renderer): void\n    {\n    // rebuild the scene graph based on layers...\n        const root = renderGroup.root;\n        const instructionSet = renderGroup.instructionSet;\n\n        instructionSet.reset();\n\n        // deprecate the use of renderPipes by finding the renderer attached to the batch pipe as this is always there\n        const renderer = (rendererOrPipes as Renderer).renderPipes\n            ? (rendererOrPipes as Renderer)\n            : (rendererOrPipes as RenderPipes).batch.renderer;\n        const renderPipes = renderer.renderPipes;\n\n        // TODO add some events / runners for build start\n        renderPipes.batch.buildStart(instructionSet);\n        renderPipes.blendMode.buildStart();\n        renderPipes.colorMask.buildStart();\n\n        if (root.sortableChildren)\n        {\n            root.sortChildren();\n        }\n\n        root.collectRenderablesWithEffects(instructionSet, renderer, null);\n\n        // TODO add some events / runners for build end\n        renderPipes.batch.buildEnd(instructionSet);\n        renderPipes.blendMode.buildEnd(instructionSet);\n    }\n}\n\n","import type { RenderPipe } from '../../../rendering/renderers/shared/instructions/RenderPipe';\nimport type { RenderPipes } from '../../../rendering/renderers/types';\nimport type { RenderGroup } from '../RenderGroup';\n\nexport function validateRenderables(renderGroup: RenderGroup, renderPipes: RenderPipes): boolean\n{\n    const { list, index } = renderGroup.childrenRenderablesToUpdate;\n\n    let rebuildRequired = false;\n\n    for (let i = 0; i < index; i++)\n    {\n        const container = list[i];\n\n        // note to self: there is no need to check if container.parentRenderGroup || !container.renderGroup\n        // exist here, as this function is only called if the structure did NOT change\n        // which means they have to be valid if this function is called\n\n        const renderable = container;\n        const pipe = renderPipes[renderable.renderPipeId as keyof RenderPipes] as RenderPipe<any>;\n\n        rebuildRequired = pipe.validateRenderable(container);\n\n        if (rebuildRequired)\n        {\n            break;\n        }\n    }\n\n    renderGroup.structureDidChange = rebuildRequired;\n\n    return rebuildRequired;\n}\n","import { ExtensionType } from '../../extensions/Extensions';\nimport { BigPool } from '../../utils/pool/PoolGroup';\nimport { BatchableSprite } from './BatchableSprite';\n\nimport type { InstructionSet } from '../../rendering/renderers/shared/instructions/InstructionSet';\nimport type { RenderPipe } from '../../rendering/renderers/shared/instructions/RenderPipe';\nimport type { Renderer } from '../../rendering/renderers/types';\nimport type { PoolItem } from '../../utils/pool/Pool';\nimport type { Container } from '../container/Container';\nimport type { Sprite } from './Sprite';\n\nexport class SpritePipe implements RenderPipe<Sprite>\n{\n    /** @ignore */\n    public static extension = {\n        type: [\n            ExtensionType.WebGLPipes,\n            ExtensionType.WebGPUPipes,\n            ExtensionType.CanvasPipes,\n        ],\n        name: 'sprite',\n    } as const;\n\n    private _renderer: Renderer;\n    private _gpuSpriteHash: Record<number, BatchableSprite> = Object.create(null);\n    private readonly _destroyRenderableBound = this.destroyRenderable.bind(this) as (renderable: Container) => void;\n\n    constructor(renderer: Renderer)\n    {\n        this._renderer = renderer;\n        this._renderer.renderableGC.addManagedHash(this, '_gpuSpriteHash');\n    }\n\n    public addRenderable(sprite: Sprite, instructionSet: InstructionSet)\n    {\n        const gpuSprite = this._getGpuSprite(sprite);\n\n        if (sprite.didViewUpdate) this._updateBatchableSprite(sprite, gpuSprite);\n\n        // TODO visibility\n        this._renderer.renderPipes.batch.addToBatch(gpuSprite, instructionSet);\n    }\n\n    public updateRenderable(sprite: Sprite)\n    {\n        const gpuSprite = this._gpuSpriteHash[sprite.uid];\n\n        if (sprite.didViewUpdate) this._updateBatchableSprite(sprite, gpuSprite);\n\n        gpuSprite._batcher.updateElement(gpuSprite);\n    }\n\n    public validateRenderable(sprite: Sprite): boolean\n    {\n        const gpuSprite = this._getGpuSprite(sprite);\n\n        return !gpuSprite._batcher.checkAndUpdateTexture(\n            gpuSprite,\n            sprite._texture)\n        ;\n    }\n\n    public destroyRenderable(sprite: Sprite)\n    {\n        const batchableSprite = this._gpuSpriteHash[sprite.uid];\n\n        // this will call reset!\n        BigPool.return(batchableSprite as PoolItem);\n\n        this._gpuSpriteHash[sprite.uid] = null;\n\n        sprite.off('destroyed', this._destroyRenderableBound);\n    }\n\n    private _updateBatchableSprite(sprite: Sprite, batchableSprite: BatchableSprite)\n    {\n        batchableSprite.bounds = sprite.visualBounds;\n        batchableSprite.texture = sprite._texture;\n    }\n\n    private _getGpuSprite(sprite: Sprite): BatchableSprite\n    {\n        return this._gpuSpriteHash[sprite.uid] || this._initGPUSprite(sprite);\n    }\n\n    private _initGPUSprite(sprite: Sprite): BatchableSprite\n    {\n        const batchableSprite = BigPool.get(BatchableSprite);\n\n        batchableSprite.renderable = sprite;\n\n        batchableSprite.transform = sprite.groupTransform;\n        batchableSprite.texture = sprite._texture;\n        batchableSprite.bounds = sprite.visualBounds;\n        batchableSprite.roundPixels = (this._renderer._roundPixels | sprite._roundPixels) as 0 | 1;\n\n        this._gpuSpriteHash[sprite.uid] = batchableSprite;\n\n        // TODO perhaps manage this outside this pipe? (a bit like how we update / add)\n        sprite.on('destroyed', this._destroyRenderableBound);\n\n        return batchableSprite;\n    }\n\n    public destroy()\n    {\n        for (const i in this._gpuSpriteHash)\n        {\n            BigPool.return(this._gpuSpriteHash[i] as PoolItem);\n        }\n\n        this._gpuSpriteHash = null;\n        this._renderer = null;\n    }\n}\n","import { extensions, ExtensionType } from '../../../extensions/Extensions';\nimport { State } from '../../renderers/shared/state/State';\nimport { DefaultBatcher } from './DefaultBatcher';\n\nimport type { Geometry } from '../../renderers/shared/geometry/Geometry';\nimport type { InstructionSet } from '../../renderers/shared/instructions/InstructionSet';\nimport type { BatchPipe, InstructionPipe } from '../../renderers/shared/instructions/RenderPipe';\nimport type { Shader } from '../../renderers/shared/shader/Shader';\nimport type { Renderer } from '../../renderers/types';\nimport type { Batch, BatchableElement, Batcher } from './Batcher';\n\nexport interface BatcherAdaptor\n{\n    start(batchPipe: BatcherPipe, geometry: Geometry, shader: Shader): void\n    init?(batchPipe: BatcherPipe): void;\n    execute(batchPipe: BatcherPipe, batch: Batch): void\n    contextChange?(): void;\n}\n\n/**\n * A pipe that batches elements into batches and sends them to the renderer.\n *\n * You can install new Batchers using ExtensionType.Batcher. Each render group will\n * have a default batcher and any required ones will be created on demand.\n * @memberof rendering\n */\nexport class BatcherPipe implements InstructionPipe<Batch>, BatchPipe\n{\n    /** @ignore */\n    public static extension = {\n        type: [\n            ExtensionType.WebGLPipes,\n            ExtensionType.WebGPUPipes,\n            ExtensionType.CanvasPipes,\n        ],\n        name: 'batch',\n    } as const;\n\n    public state: State = State.for2d();\n    public renderer: Renderer;\n\n    private readonly _batchersByInstructionSet: Record<number, Record<string, Batcher>> = Object.create(null);\n\n    private _adaptor: BatcherAdaptor;\n\n    /** A record of all active batchers, keyed by their names */\n    private _activeBatches: Record<string, Batcher> = Object.create(null);\n\n    /** The currently active batcher being used to batch elements */\n    private _activeBatch: Batcher;\n\n    public static _availableBatchers: Record<string, new () => Batcher> = Object.create(null);\n\n    public static getBatcher(name: string): Batcher\n    {\n        return new this._availableBatchers[name as keyof typeof this._availableBatchers]();\n    }\n\n    constructor(renderer: Renderer, adaptor: BatcherAdaptor)\n    {\n        this.renderer = renderer;\n        this._adaptor = adaptor;\n\n        this._adaptor.init?.(this);\n    }\n\n    public buildStart(instructionSet: InstructionSet)\n    {\n        let batchers = this._batchersByInstructionSet[instructionSet.uid];\n\n        if (!batchers)\n        {\n            batchers = this._batchersByInstructionSet[instructionSet.uid] = Object.create(null);\n            batchers.default ||= new DefaultBatcher();\n        }\n\n        this._activeBatches = batchers;\n\n        this._activeBatch = this._activeBatches.default;\n\n        for (const i in this._activeBatches)\n        {\n            this._activeBatches[i].begin();\n        }\n    }\n\n    public addToBatch(batchableObject: BatchableElement, instructionSet: InstructionSet)\n    {\n        if (this._activeBatch.name !== batchableObject.batcherName)\n        {\n            this._activeBatch.break(instructionSet);\n\n            let batch = this._activeBatches[batchableObject.batcherName];\n\n            if (!batch)\n            {\n                batch = this._activeBatches[batchableObject.batcherName]\n                    = BatcherPipe.getBatcher(batchableObject.batcherName);\n                batch.begin();\n            }\n\n            this._activeBatch = batch;\n        }\n\n        this._activeBatch.add(batchableObject);\n    }\n\n    public break(instructionSet: InstructionSet)\n    {\n        this._activeBatch.break(instructionSet);\n    }\n\n    public buildEnd(instructionSet: InstructionSet)\n    {\n        this._activeBatch.break(instructionSet);\n\n        const batches = this._activeBatches;\n\n        for (const i in batches)\n        {\n            const batch = batches[i as keyof typeof batches];\n            const geometry = batch.geometry;\n\n            geometry.indexBuffer.setDataWithSize(batch.indexBuffer, batch.indexSize, true);\n\n            geometry.buffers[0].setDataWithSize(batch.attributeBuffer.float32View, batch.attributeSize, false);\n        }\n    }\n\n    public upload(instructionSet: InstructionSet)\n    {\n        const batchers = this._batchersByInstructionSet[instructionSet.uid];\n\n        for (const i in batchers)\n        {\n            const batcher = batchers[i as keyof typeof batchers];\n            const geometry = batcher.geometry;\n\n            if (batcher.dirty)\n            {\n                batcher.dirty = false;\n\n                geometry.buffers[0].update(batcher.attributeSize * 4);\n            }\n        }\n    }\n\n    public execute(batch: Batch)\n    {\n        if (batch.action === 'startBatch')\n        {\n            const batcher = batch.batcher;\n            const geometry = batcher.geometry;\n            const shader = batcher.shader;\n\n            this._adaptor.start(this, geometry, shader);\n        }\n\n        this._adaptor.execute(this, batch);\n    }\n\n    public destroy()\n    {\n        this.state = null;\n        this.renderer = null;\n\n        this._adaptor = null;\n\n        for (const i in this._activeBatches)\n        {\n            this._activeBatches[i].destroy();\n        }\n\n        this._activeBatches = null;\n    }\n}\n\nextensions.handleByMap(ExtensionType.Batcher, BatcherPipe._availableBatchers);\n\nextensions.add(DefaultBatcher);\n","import { GlProgram } from '../rendering/renderers/gl/shader/GlProgram';\nimport { GpuProgram } from '../rendering/renderers/gpu/shader/GpuProgram';\nimport { Shader } from '../rendering/renderers/shared/shader/Shader';\nimport { State } from '../rendering/renderers/shared/state/State';\n\nimport type { RenderSurface } from '../rendering/renderers/shared/renderTarget/RenderTargetSystem';\nimport type {\n    IShaderWithResources,\n    ShaderFromResources,\n    ShaderWithResources\n} from '../rendering/renderers/shared/shader/Shader';\nimport type { BLEND_MODES } from '../rendering/renderers/shared/state/const';\nimport type { Texture } from '../rendering/renderers/shared/texture/Texture';\nimport type { FilterSystem } from './FilterSystem';\n\n/**\n * Filters provide additional shading and post-processing effects to any display object and its children\n * they are attached to.\n *\n * You attached filters to a display object using its `filters` array property.\n *\n * ```js\n * import { Sprite, BlurFilter, HardMixBlend } from 'pixi.js';\n *\n * const sprite = Sprite.from('myTexture.png');\n *\n * // single filter\n * sprite.filters = new BlurFilter({ strength: 8 });\n *\n * // or multiple filters\n * sprite.filters = [new BlurFilter({ strength: 8 }), new HardMixBlend()];\n * ```\n *\n * Pixi has a number of built-in filters which can be used in your game or application:\n *\n * - {@link filters.AlphaFilter} - Applies alpha to the display object and any of its children.\n * - {@link filters.BlurFilter} - Applies a Gaussian blur to the display object.\n * - {@link filters.BlurFilterPass} - Applies a blur pass to an object.\n * - {@link filters.ColorBurnBlend} - Blend mode to add color burn to display objects.\n * - {@link filters.ColorDodgeBlend} - Blend mode to add color dodge to display objects.\n * - {@link filters.ColorMatrixFilter} - Transform the color channels by matrix multiplication.\n * - {@link filters.DarkenBlend} - Blend mode to darken display objects.\n * - {@link filters.DisplacementFilter} - Applies a displacement map to distort an object.\n * - {@link filters.DivideBlend} - Blend mode to divide display objects.\n * - {@link filters.HardMixBlend} - Blend mode to hard mix display objects.\n * - {@link filters.LinearBurnBlend} - Blend mode to add linear burn to display objects.\n * - {@link filters.LinearDodgeBlend} - Blend mode to add linear dodge to display objects.\n * - {@link filters.LinearLightBlend} - Blend mode to add linear light to display objects.\n * - {@link filters.NoiseFilter} - Applies random noise to an object.\n * - {@link filters.PinLightBlend} - Blend mode to add pin light to display objects.\n * - {@link filters.SubtractBlend} - Blend mode to subtract display objects.\n *\n * <br/>\n * For more available filters, check out the\n *  {@link https://pixijs.io/filters/docs/ pixi-filters} repository.\n *\n * You can also check out the awesome {@link https://pixijs.io/filters/examples/ Filter demo} to see\n * filters in action and combine them!\n * @namespace filters\n */\n\n/**\n * The options to use when creating a new filter.\n * @memberof filters\n */\nexport interface FilterOptions\n{\n    /** optional blend mode used by the filter when rendering (defaults to 'normal') */\n    blendMode?: BLEND_MODES;\n    /**\n     * the resolution the filter should be rendered at. The lower the resolution, the more performant\n     * the filter will be, but the lower the quality of the output. (default 1)\n     * If 'inherit', the resolution of the render target is used.\n     * Consider lowering this for things like blurs filters\n     */\n    resolution?: number | 'inherit';\n    /**\n     * the amount of pixels to pad the container with when applying the filter. For example a blur extends the\n     * container out as it blurs, so padding is applied to ensure that extra detail is rendered as well\n     * without clipping occurring. (default 0)\n     */\n    padding?: number;\n    /**\n     * If true the filter will make use of antialiasing. Although it looks better this can have a performance impact.\n     * If set to 'inherit', the filter will detect the antialiasing of the render target and change this automatically.\n     * Definitely don't set this to true if the render target has antialiasing set to false. As it will antialias,\n     * but you won't see the difference. (default 'off')\n     *\n     * This can be a boolean or [FilterAntialias]{@link filters.FilterAntialias} string.\n     */\n    antialias?: FilterAntialias | boolean;\n    /**\n     * If this is set to true, the filter system will grab a snap shot of the area being rendered\n     * to and pass this into the shader. This is useful for blend modes that need to be aware of the pixels\n     * they are rendering to. Only use if you need that data, otherwise its an extra gpu copy you don't need!\n     * (default false)\n     */\n    blendRequired?: boolean;\n    /**\n     * If this is set to true, the filter system will clip filter texture into viewport\n     * This is useful for filters that applied to whole texture.\n     * (default true)\n     */\n    clipToViewport?: boolean;\n}\n\n/** Filter options mixed with shader resources. A filter needs a shader and some resources to work. */\nexport type FilterWithShader = FilterOptions & IShaderWithResources;\n\n/**\n * The antialiasing mode of the filter. This can be either:\n * - `on` - the filter is always antialiased regardless of the render target settings\n * - `off` - (default) the filter is never antialiased regardless of the render target settings\n * - `inherit` - the filter uses the antialias settings of the render target\n * @memberof filters\n */\nexport type FilterAntialias = 'on' | 'off' | 'inherit';\n\n/**\n * The Filter class is the base for all filter effects used in Pixi.js\n * As it extends a shader, it requires that a glProgram is parsed in to work with WebGL and a gpuProgram for WebGPU.\n * If you don't proved one, then the filter is skipped and just rendered as if it wasn't there for that renderer.\n *\n * A filter can be applied to anything that extends Container in Pixi.js which also includes Sprites, Graphics etc.\n *\n * Its worth noting Performance-wise filters can be pretty expensive if used too much in a single scene.\n * The following happens under the hood when a filter is applied:\n *\n * .1. Break the current batch\n * <br>\n * .2. The target is measured using getGlobalBounds\n * (recursively go through all children and figure out how big the object is)\n * <br>\n * .3. Get the closest Po2 Textures from the texture pool\n * <br>\n * .4. Render the target to that texture\n * <br>\n * .5. Render that texture back to the main frame buffer as a quad using the filters program.\n * <br>\n * <br>\n * Some filters (such as blur) require multiple passes too which can result in an even bigger performance hit. So be careful!\n * Its not generally the complexity of the shader that is the bottle neck,\n * but all the framebuffer / shader switching that has to take place.\n * One filter applied to a container with many objects is MUCH faster than many filter applied to many objects.\n * @class\n * @memberof filters\n */\nexport class Filter extends Shader\n{\n    /**\n     * The default filter settings\n     * @static\n     */\n    public static readonly defaultOptions: FilterOptions = {\n        blendMode: 'normal',\n        resolution: 1,\n        padding: 0,\n        antialias: 'off',\n        blendRequired: false,\n        clipToViewport: true,\n    };\n\n    /**\n     * The padding of the filter. Some filters require extra space to breath such as a blur.\n     * Increasing this will add extra width and height to the bounds of the object that the\n     * filter is applied to.\n     * @default 0\n     */\n    public padding: number;\n\n    /**\n     * should the filter use antialiasing?\n     * @default inherit\n     */\n    public antialias: FilterAntialias;\n\n    /** If enabled is true the filter is applied, if false it will not. */\n    public enabled = true;\n\n    /**\n     * The gpu state the filter requires to render.\n     * @internal\n     * @ignore\n     */\n    public _state = State.for2d();\n\n    /**\n     * The resolution of the filter. Setting this to be lower will lower the quality but\n     * increase the performance of the filter.\n     * @default 1\n     */\n    public resolution: number | 'inherit';\n\n    /**\n     * Whether or not this filter requires the previous render texture for blending.\n     * @default false\n     */\n    public blendRequired: boolean;\n\n    /**\n     * Clip texture into viewport or not\n     * @default true\n     */\n    public clipToViewport: boolean;\n\n    /**\n     * @param options - The optional parameters of this filter.\n     */\n    constructor(options: FilterWithShader)\n    {\n        options = { ...Filter.defaultOptions, ...options };\n\n        super(options as ShaderWithResources);\n\n        this.blendMode = options.blendMode;\n        this.padding = options.padding;\n\n        // check if is boolean\n        if (typeof options.antialias === 'boolean')\n        {\n            this.antialias = options.antialias ? 'on' : 'off';\n        }\n        else\n        {\n            this.antialias = options.antialias;\n        }\n\n        this.resolution = options.resolution;\n        this.blendRequired = options.blendRequired;\n        this.clipToViewport = options.clipToViewport;\n\n        this.addResource('uTexture', 0, 1);\n    }\n\n    /**\n     * Applies the filter\n     * @param filterManager - The renderer to retrieve the filter from\n     * @param input - The input render target.\n     * @param output - The target to output to.\n     * @param clearMode - Should the output be cleared before rendering to it\n     */\n    public apply(\n        filterManager: FilterSystem,\n        input: Texture,\n        output: RenderSurface,\n        clearMode: boolean\n    ): void\n    {\n        filterManager.applyFilter(this, input, output, clearMode);\n    }\n\n    /**\n     * Get the blend mode of the filter.\n     * @default \"normal\"\n     */\n    get blendMode(): BLEND_MODES\n    {\n        return this._state.blendMode;\n    }\n\n    /** Sets the blend mode of the filter. */\n    set blendMode(value: BLEND_MODES)\n    {\n        this._state.blendMode = value;\n    }\n\n    /**\n     * A short hand function to create a filter based of a vertex and fragment shader src.\n     * @param options\n     * @returns A shiny new PixiJS filter!\n     */\n    public static from(options: FilterOptions & ShaderFromResources): Filter\n    {\n        const { gpu, gl, ...rest } = options;\n\n        let gpuProgram: GpuProgram;\n        let glProgram: GlProgram;\n\n        if (gpu)\n        {\n            gpuProgram = GpuProgram.from(gpu);\n        }\n\n        if (gl)\n        {\n            glProgram = GlProgram.from(gl);\n        }\n\n        return new Filter({\n            gpuProgram,\n            glProgram,\n            ...rest\n        });\n    }\n}\n","import { Matrix } from '../../maths/matrix/Matrix';\nimport { GlProgram } from '../../rendering/renderers/gl/shader/GlProgram';\nimport { GpuProgram } from '../../rendering/renderers/gpu/shader/GpuProgram';\nimport { UniformGroup } from '../../rendering/renderers/shared/shader/UniformGroup';\nimport { TextureMatrix } from '../../rendering/renderers/shared/texture/TextureMatrix';\nimport { Filter } from '../Filter';\nimport fragment from './mask.frag';\nimport vertex from './mask.vert';\nimport source from './mask.wgsl';\n\nimport type { Texture } from '../../rendering/renderers/shared/texture/Texture';\nimport type { Sprite } from '../../scene/sprite/Sprite';\nimport type { FilterOptions } from '../Filter';\nimport type { FilterSystem } from '../FilterSystem';\n\nexport interface MaskFilterOptions extends FilterOptions\n{\n    sprite: Sprite,\n    inverse?: boolean;\n    scale?: number | { x: number, y: number },\n}\n\nexport class MaskFilter extends Filter\n{\n    public sprite: Sprite;\n    private readonly _textureMatrix: TextureMatrix;\n\n    constructor(options: MaskFilterOptions)\n    {\n        const { sprite, ...rest } = options;\n\n        const textureMatrix = new TextureMatrix(sprite.texture);\n\n        const filterUniforms = new UniformGroup({\n            uFilterMatrix: { value: new Matrix(), type: 'mat3x3<f32>' },\n            uMaskClamp: { value: textureMatrix.uClampFrame, type: 'vec4<f32>' },\n            uAlpha: { value: 1, type: 'f32' },\n            uInverse: { value: options.inverse ? 1 : 0, type: 'f32' },\n        });\n\n        const gpuProgram = GpuProgram.from({\n            vertex: {\n                source,\n                entryPoint: 'mainVertex',\n            },\n            fragment: {\n                source,\n                entryPoint: 'mainFragment',\n            },\n        });\n\n        const glProgram = GlProgram.from({\n            vertex,\n            fragment,\n            name: 'mask-filter',\n        });\n\n        super({\n            ...rest,\n            gpuProgram,\n            glProgram,\n            resources: {\n                filterUniforms,\n                uMaskTexture: sprite.texture.source,\n            },\n        });\n\n        this.sprite = sprite;\n\n        this._textureMatrix = textureMatrix;\n    }\n\n    set inverse(value: boolean)\n    {\n        this.resources.filterUniforms.uniforms.uInverse = value ? 1 : 0;\n    }\n\n    get inverse(): boolean\n    {\n        return this.resources.filterUniforms.uniforms.uInverse === 1;\n    }\n\n    public apply(\n        filterManager: FilterSystem,\n        input: Texture,\n        output: Texture,\n        clearMode: boolean\n    ): void\n    {\n        // will trigger an update if the texture changed..\n        this._textureMatrix.texture = this.sprite.texture;\n\n        filterManager.calculateSpriteMatrix(\n            this.resources.filterUniforms.uniforms.uFilterMatrix as Matrix,\n            this.sprite\n        ).prepend(this._textureMatrix.mapCoord);\n\n        this.resources.uMaskTexture = this.sprite.texture.source;\n\n        filterManager.applyFilter(this, input, output, clearMode);\n    }\n}\n","import { ExtensionType } from '../../../extensions/Extensions';\nimport { FilterEffect } from '../../../filters/FilterEffect';\nimport { MaskFilter } from '../../../filters/mask/MaskFilter';\nimport { Bounds } from '../../../scene/container/bounds/Bounds';\nimport { getGlobalBounds } from '../../../scene/container/bounds/getGlobalBounds';\nimport { Sprite } from '../../../scene/sprite/Sprite';\nimport { BigPool } from '../../../utils/pool/PoolGroup';\nimport { Texture } from '../../renderers/shared/texture/Texture';\nimport { TexturePool } from '../../renderers/shared/texture/TexturePool';\nimport { RendererType } from '../../renderers/types';\n\nimport type { Container } from '../../../scene/container/Container';\nimport type { Effect } from '../../../scene/container/Effect';\nimport type { PoolItem } from '../../../utils/pool/Pool';\nimport type { Instruction } from '../../renderers/shared/instructions/Instruction';\nimport type { InstructionSet } from '../../renderers/shared/instructions/InstructionSet';\nimport type { InstructionPipe } from '../../renderers/shared/instructions/RenderPipe';\nimport type { RenderTarget } from '../../renderers/shared/renderTarget/RenderTarget';\nimport type { Renderer } from '../../renderers/types';\nimport type { AlphaMask } from './AlphaMask';\n\ntype MaskMode = 'pushMaskBegin' | 'pushMaskEnd' | 'popMaskBegin' | 'popMaskEnd';\n\nconst tempBounds = new Bounds();\n\nclass AlphaMaskEffect extends FilterEffect implements PoolItem\n{\n    constructor()\n    {\n        super();\n\n        this.filters = [new MaskFilter({\n            sprite: new Sprite(Texture.EMPTY),\n            inverse: false,\n            resolution: 'inherit',\n            antialias: 'inherit'\n        })];\n    }\n\n    get sprite(): Sprite\n    {\n        return (this.filters[0] as MaskFilter).sprite;\n    }\n\n    set sprite(value: Sprite)\n    {\n        (this.filters[0] as MaskFilter).sprite = value;\n    }\n\n    get inverse(): boolean\n    {\n        return (this.filters[0] as MaskFilter).inverse;\n    }\n\n    set inverse(value: boolean)\n    {\n        (this.filters[0] as MaskFilter).inverse = value;\n    }\n\n    public init: () => void;\n}\n\nexport interface AlphaMaskInstruction extends Instruction\n{\n    renderPipeId: 'alphaMask',\n    action: MaskMode,\n    mask: AlphaMask,\n    inverse: boolean;\n    maskedContainer: Container,\n    renderMask: boolean,\n}\n\nexport interface AlphaMaskData\n{\n    filterEffect: AlphaMaskEffect,\n    maskedContainer: Container,\n    previousRenderTarget?: RenderTarget,\n    filterTexture?: Texture,\n}\n\nexport class AlphaMaskPipe implements InstructionPipe<AlphaMaskInstruction>\n{\n    /** @ignore */\n    public static extension = {\n        type: [\n            ExtensionType.WebGLPipes,\n            ExtensionType.WebGPUPipes,\n            ExtensionType.CanvasPipes,\n        ],\n        name: 'alphaMask',\n    } as const;\n\n    private _renderer: Renderer;\n    private _activeMaskStage: AlphaMaskData[] = [];\n\n    constructor(renderer: Renderer)\n    {\n        this._renderer = renderer;\n    }\n\n    public push(mask: Effect, maskedContainer: Container, instructionSet: InstructionSet): void\n    {\n        const renderer = this._renderer;\n\n        renderer.renderPipes.batch.break(instructionSet);\n\n        instructionSet.add({\n            renderPipeId: 'alphaMask',\n            action: 'pushMaskBegin',\n            mask,\n            inverse: maskedContainer._maskOptions.inverse,\n            canBundle: false,\n            maskedContainer\n        } as AlphaMaskInstruction);\n\n        (mask as AlphaMask).inverse = maskedContainer._maskOptions.inverse;\n\n        if ((mask as AlphaMask).renderMaskToTexture)\n        {\n            const maskContainer = (mask as AlphaMask).mask;\n\n            maskContainer.includeInBuild = true;\n\n            maskContainer.collectRenderables(\n                instructionSet,\n                renderer,\n                null\n            );\n\n            maskContainer.includeInBuild = false;\n        }\n\n        renderer.renderPipes.batch.break(instructionSet);\n\n        instructionSet.add({\n            renderPipeId: 'alphaMask',\n            action: 'pushMaskEnd',\n            mask,\n            maskedContainer,\n            inverse: maskedContainer._maskOptions.inverse,\n            canBundle: false,\n        } as AlphaMaskInstruction);\n    }\n\n    public pop(mask: Effect, _maskedContainer: Container, instructionSet: InstructionSet): void\n    {\n        const renderer = this._renderer;\n\n        renderer.renderPipes.batch.break(instructionSet);\n\n        instructionSet.add({\n            renderPipeId: 'alphaMask',\n            action: 'popMaskEnd',\n            mask,\n            inverse: _maskedContainer._maskOptions.inverse,\n            canBundle: false,\n        } as AlphaMaskInstruction);\n    }\n\n    public execute(instruction: AlphaMaskInstruction)\n    {\n        const renderer = this._renderer;\n        const renderMask = instruction.mask.renderMaskToTexture;\n\n        if (instruction.action === 'pushMaskBegin')\n        {\n            const filterEffect = BigPool.get(AlphaMaskEffect);\n\n            filterEffect.inverse = instruction.inverse;\n\n            if (renderMask)\n            {\n                instruction.mask.mask.measurable = true;\n\n                const bounds = getGlobalBounds(instruction.mask.mask, true, tempBounds);\n\n                instruction.mask.mask.measurable = false;\n\n                bounds.ceil();\n\n                const colorTextureSource = renderer.renderTarget.renderTarget.colorTexture.source;\n                const filterTexture = TexturePool.getOptimalTexture(\n                    bounds.width,\n                    bounds.height,\n                    colorTextureSource._resolution,\n                    colorTextureSource.antialias\n                );\n\n                renderer.renderTarget.push(filterTexture, true);\n\n                renderer.globalUniforms.push({\n                    offset: bounds,\n                    worldColor: 0xFFFFFFFF\n                });\n\n                const sprite = filterEffect.sprite;\n\n                sprite.texture = filterTexture;\n\n                sprite.worldTransform.tx = bounds.minX;\n                sprite.worldTransform.ty = bounds.minY;\n\n                this._activeMaskStage.push({\n                    filterEffect,\n                    maskedContainer: instruction.maskedContainer,\n                    filterTexture,\n                });\n            }\n            else\n            {\n                filterEffect.sprite = instruction.mask.mask as Sprite;\n\n                this._activeMaskStage.push({\n                    filterEffect,\n                    maskedContainer: instruction.maskedContainer,\n                });\n            }\n        }\n        else if (instruction.action === 'pushMaskEnd')\n        {\n            const maskData = this._activeMaskStage[this._activeMaskStage.length - 1];\n\n            if (renderMask)\n            {\n                // WebGPU blit's automatically, but WebGL does not!\n                if (renderer.type === RendererType.WEBGL)\n                {\n                    renderer.renderTarget.finishRenderPass();\n                }\n\n                renderer.renderTarget.pop();\n                renderer.globalUniforms.pop();\n            }\n\n            renderer.filter.push({\n                renderPipeId: 'filter',\n                action: 'pushFilter',\n                container: maskData.maskedContainer,\n                filterEffect: maskData.filterEffect,\n                canBundle: false,\n            });\n        }\n        else if (instruction.action === 'popMaskEnd')\n        {\n            renderer.filter.pop();\n\n            const maskData = this._activeMaskStage.pop();\n\n            if (renderMask)\n            {\n                TexturePool.returnTexture(maskData.filterTexture);\n            }\n\n            BigPool.return(maskData.filterEffect);\n        }\n    }\n\n    public destroy(): void\n    {\n        this._renderer = null;\n        this._activeMaskStage = null;\n    }\n}\n","import { ExtensionType } from '../../../extensions/Extensions';\n\nimport type { Container } from '../../../scene/container/Container';\nimport type { Effect } from '../../../scene/container/Effect';\nimport type { Instruction } from '../../renderers/shared/instructions/Instruction';\nimport type { InstructionSet } from '../../renderers/shared/instructions/InstructionSet';\nimport type { InstructionPipe } from '../../renderers/shared/instructions/RenderPipe';\nimport type { Renderer } from '../../renderers/types';\nimport type { ColorMask } from './ColorMask';\n\nexport interface ColorMaskInstruction extends Instruction\n{\n    renderPipeId: 'colorMask',\n    colorMask: number,\n}\n\nexport class ColorMaskPipe implements InstructionPipe<ColorMaskInstruction>\n{\n    /** @ignore */\n    public static extension = {\n        type: [\n            ExtensionType.WebGLPipes,\n            ExtensionType.WebGPUPipes,\n            ExtensionType.CanvasPipes,\n        ],\n        name: 'colorMask',\n    } as const;\n\n    private readonly _renderer: Renderer;\n    private _colorStack: number[] = [];\n    private _colorStackIndex = 0;\n    private _currentColor = 0;\n\n    constructor(renderer: Renderer)\n    {\n        this._renderer = renderer;\n    }\n\n    public buildStart()\n    {\n        this._colorStack[0] = 0xF;\n        this._colorStackIndex = 1;\n        this._currentColor = 0xF;\n    }\n\n    public push(mask: Effect, _container: Container, instructionSet: InstructionSet): void\n    {\n        const renderer = this._renderer;\n\n        renderer.renderPipes.batch.break(instructionSet);\n\n        const colorStack = this._colorStack;\n\n        colorStack[this._colorStackIndex] = colorStack[this._colorStackIndex - 1] & (mask as ColorMask).mask;\n\n        const currentColor = this._colorStack[this._colorStackIndex];\n\n        if (currentColor !== this._currentColor)\n        {\n            this._currentColor = currentColor;\n            instructionSet.add({\n                renderPipeId: 'colorMask',\n                colorMask: currentColor,\n                canBundle: false,\n            } as ColorMaskInstruction);\n        }\n\n        this._colorStackIndex++;\n    }\n\n    public pop(_mask: Effect, _container: Container, instructionSet: InstructionSet): void\n    {\n        const renderer = this._renderer;\n\n        renderer.renderPipes.batch.break(instructionSet);\n\n        const colorStack = this._colorStack;\n\n        this._colorStackIndex--;\n\n        const currentColor = colorStack[this._colorStackIndex - 1];\n\n        if (currentColor !== this._currentColor)\n        {\n            this._currentColor = currentColor;\n\n            instructionSet.add({\n                renderPipeId: 'colorMask',\n                colorMask: currentColor,\n                canBundle: false,\n            } as ColorMaskInstruction);\n        }\n    }\n\n    public execute(instruction: ColorMaskInstruction)\n    {\n        const renderer = this._renderer;\n\n        renderer.colorMask.setMask(instruction.colorMask);\n    }\n\n    public destroy()\n    {\n        this._colorStack = null;\n    }\n}\n","import { ExtensionType } from '../../../extensions/Extensions';\nimport { CLEAR } from '../../renderers/gl/const';\nimport { STENCIL_MODES } from '../../renderers/shared/state/const';\n\nimport type { Container } from '../../../scene/container/Container';\nimport type { Effect } from '../../../scene/container/Effect';\nimport type { Instruction } from '../../renderers/shared/instructions/Instruction';\nimport type { InstructionSet } from '../../renderers/shared/instructions/InstructionSet';\nimport type { InstructionPipe } from '../../renderers/shared/instructions/RenderPipe';\nimport type { Renderable } from '../../renderers/shared/Renderable';\nimport type { Renderer } from '../../renderers/types';\nimport type { StencilMask } from './StencilMask';\n\ntype MaskMode = 'pushMaskBegin' | 'pushMaskEnd' | 'popMaskBegin' | 'popMaskEnd';\n\nexport interface StencilMaskInstruction extends Instruction\n{\n    renderPipeId: 'stencilMask',\n    action: MaskMode,\n    inverse: boolean,\n    mask: StencilMask,\n}\n\nexport class StencilMaskPipe implements InstructionPipe<StencilMaskInstruction>\n{\n    public static extension = {\n        type: [\n            ExtensionType.WebGLPipes,\n            ExtensionType.WebGPUPipes,\n            ExtensionType.CanvasPipes,\n        ],\n        name: 'stencilMask',\n    } as const;\n\n    private _renderer: Renderer;\n\n    // used when building and also when executing..\n    private _maskStackHash: Record<number, number> = {};\n\n    private _maskHash = new WeakMap<StencilMask, {\n        instructionsStart: number,\n        instructionsLength: number,\n    }>();\n\n    constructor(renderer: Renderer)\n    {\n        this._renderer = renderer;\n    }\n\n    public push(mask: Effect, _container: Container, instructionSet: InstructionSet): void\n    {\n        const effect = mask as StencilMask;\n\n        const renderer = this._renderer;\n\n        renderer.renderPipes.batch.break(instructionSet);\n\n        renderer.renderPipes.blendMode.setBlendMode(effect.mask as Renderable, 'none', instructionSet);\n\n        instructionSet.add({\n            renderPipeId: 'stencilMask',\n            action: 'pushMaskBegin',\n            mask,\n            inverse: _container._maskOptions.inverse,\n            canBundle: false,\n        } as StencilMaskInstruction);\n\n        const maskContainer = effect.mask;\n\n        maskContainer.includeInBuild = true;\n\n        if (!this._maskHash.has(effect))\n        {\n            this._maskHash.set(effect, {\n                instructionsStart: 0,\n                instructionsLength: 0,\n            });\n        }\n\n        const maskData = this._maskHash.get(effect);\n\n        maskData.instructionsStart = instructionSet.instructionSize;\n\n        maskContainer.collectRenderables(\n            instructionSet,\n            renderer,\n            null\n        );\n\n        maskContainer.includeInBuild = false;\n\n        renderer.renderPipes.batch.break(instructionSet);\n\n        instructionSet.add({\n            renderPipeId: 'stencilMask',\n            action: 'pushMaskEnd',\n            mask,\n            inverse: _container._maskOptions.inverse,\n            canBundle: false,\n        } as StencilMaskInstruction);\n\n        const instructionsLength = instructionSet.instructionSize - maskData.instructionsStart - 1;\n\n        maskData.instructionsLength = instructionsLength;\n\n        const renderTargetUid = renderer.renderTarget.renderTarget.uid;\n\n        this._maskStackHash[renderTargetUid] ??= 0;\n    }\n\n    public pop(mask: Effect, _container: Container, instructionSet: InstructionSet): void\n    {\n        const effect = mask as StencilMask;\n\n        const renderer = this._renderer;\n\n        // stencil is stored based on current render target..\n        renderer.renderPipes.batch.break(instructionSet);\n        renderer.renderPipes.blendMode.setBlendMode(effect.mask as Renderable, 'none', instructionSet);\n\n        instructionSet.add({\n            renderPipeId: 'stencilMask',\n            action: 'popMaskBegin',\n            inverse: _container._maskOptions.inverse,\n            canBundle: false,\n        } as StencilMaskInstruction);\n\n        const maskData = this._maskHash.get(mask as StencilMask);\n\n        for (let i = 0; i < maskData.instructionsLength; i++)\n        {\n            // eslint-disable-next-line max-len\n            instructionSet.instructions[instructionSet.instructionSize++] = instructionSet.instructions[maskData.instructionsStart++];\n        }\n\n        instructionSet.add({\n            renderPipeId: 'stencilMask',\n            action: 'popMaskEnd',\n            canBundle: false,\n        });\n    }\n\n    public execute(instruction: StencilMaskInstruction)\n    {\n        const renderer = this._renderer;\n        const renderTargetUid = renderer.renderTarget.renderTarget.uid;\n\n        let maskStackIndex = this._maskStackHash[renderTargetUid] ??= 0;\n\n        if (instruction.action === 'pushMaskBegin')\n        {\n            // we create the depth and stencil buffers JIT\n            // as no point allocating the memory if we don't use it\n            renderer.renderTarget.ensureDepthStencil();\n\n            renderer.stencil.setStencilMode(STENCIL_MODES.RENDERING_MASK_ADD, maskStackIndex);\n\n            maskStackIndex++;\n\n            renderer.colorMask.setMask(0);\n        }\n        else if (instruction.action === 'pushMaskEnd')\n        {\n            if (instruction.inverse)\n            {\n                renderer.stencil.setStencilMode(STENCIL_MODES.INVERSE_MASK_ACTIVE, maskStackIndex);\n            }\n            else\n            {\n                renderer.stencil.setStencilMode(STENCIL_MODES.MASK_ACTIVE, maskStackIndex);\n            }\n\n            renderer.colorMask.setMask(0xF);\n        }\n        else if (instruction.action === 'popMaskBegin')\n        {\n            renderer.colorMask.setMask(0);\n\n            if (maskStackIndex !== 0)\n            {\n                renderer.stencil.setStencilMode(STENCIL_MODES.RENDERING_MASK_REMOVE, maskStackIndex);\n            }\n            else\n            {\n                renderer.renderTarget.clear(null, CLEAR.STENCIL);\n                renderer.stencil.setStencilMode(STENCIL_MODES.DISABLED, maskStackIndex);\n            }\n\n            maskStackIndex--;\n        }\n        else if (instruction.action === 'popMaskEnd')\n        {\n            if (instruction.inverse)\n            {\n                renderer.stencil.setStencilMode(STENCIL_MODES.INVERSE_MASK_ACTIVE, maskStackIndex);\n            }\n            else\n            {\n                renderer.stencil.setStencilMode(STENCIL_MODES.MASK_ACTIVE, maskStackIndex);\n            }\n\n            renderer.colorMask.setMask(0xF);\n        }\n\n        this._maskStackHash[renderTargetUid] = maskStackIndex;\n    }\n\n    public destroy()\n    {\n        this._renderer = null;\n        this._maskStackHash = null;\n        this._maskHash = null;\n    }\n}\n","import { Color } from '../../../../color/Color';\nimport { ExtensionType } from '../../../../extensions/Extensions';\n\nimport type { ColorSource, RgbaArray } from '../../../../color/Color';\nimport type { System } from '../system/System';\n\n/**\n * Options for the background system.\n * @property {ColorSource} [backgroundColor='black']\n * The background color used to clear the canvas. See {@link ColorSource} for accepted color values.\n * @property {ColorSource} [background] - Alias for backgroundColor\n * @property {number} [backgroundAlpha=1] -\n * Transparency of the background color, value from `0` (fully transparent) to `1` (fully opaque).\n * @property {boolean} [clearBeforeRender=true] - Whether to clear the canvas before new render passes.\n * @memberof rendering\n */\nexport interface BackgroundSystemOptions\n{\n    /**\n     * The background color used to clear the canvas. See {@link ColorSource} for accepted color values.\n     * @memberof rendering.SharedRendererOptions\n     * @default 'black'\n     */\n    backgroundColor: ColorSource;\n    /**\n     * Alias for backgroundColor\n     * @memberof rendering.SharedRendererOptions\n     */\n    background?: ColorSource\n    /**\n     * Transparency of the background color, value from `0` (fully transparent) to `1` (fully opaque).\n     * @memberof rendering.SharedRendererOptions\n     * @default 1\n     */\n    backgroundAlpha: number;\n    /**\n     * Whether to clear the canvas before new render passes.\n     * @memberof rendering.SharedRendererOptions\n     * @default true\n     */\n    clearBeforeRender: boolean;\n}\n\n/**\n * The background system manages the background color and alpha of the main view.\n * @memberof rendering\n */\nexport class BackgroundSystem implements System<BackgroundSystemOptions>\n{\n    /** @ignore */\n    public static extension = {\n        type: [\n            ExtensionType.WebGLSystem,\n            ExtensionType.WebGPUSystem,\n            ExtensionType.CanvasSystem,\n        ],\n        name: 'background',\n        priority: 0,\n    } as const;\n\n    /** default options used by the system */\n    public static defaultOptions: BackgroundSystemOptions = {\n        /**\n         * {@link WebGLOptions.backgroundAlpha}\n         * @default 1\n         */\n        backgroundAlpha: 1,\n        /**\n         * {@link WebGLOptions.backgroundColor}\n         * @default 0x000000\n         */\n        backgroundColor: 0x0,\n        /**\n         * {@link WebGLOptions.clearBeforeRender}\n         * @default true\n         */\n        clearBeforeRender: true,\n    };\n\n    /**\n     * This sets if the CanvasRenderer will clear the canvas or not before the new render pass.\n     * If the scene is NOT transparent PixiJS will use a canvas sized fillRect operation every\n     * frame to set the canvas background color. If the scene is transparent PixiJS will use clearRect\n     * to clear the canvas every frame. Disable this by setting this to false. For example, if\n     * your game has a canvas filling background image you often don't need this set.\n     */\n    public clearBeforeRender: boolean;\n\n    private readonly _backgroundColor: Color;\n\n    constructor()\n    {\n        this.clearBeforeRender = true;\n\n        this._backgroundColor = new Color(0x000000);\n\n        this.color = this._backgroundColor; // run bg color setter\n        this.alpha = 1;\n    }\n\n    /**\n     * initiates the background system\n     * @param options - the options for the background colors\n     */\n    public init(options: BackgroundSystemOptions): void\n    {\n        options = { ...BackgroundSystem.defaultOptions, ...options };\n\n        this.clearBeforeRender = options.clearBeforeRender;\n        this.color = options.background || options.backgroundColor || this._backgroundColor; // run bg color setter\n        this.alpha = options.backgroundAlpha;\n\n        this._backgroundColor.setAlpha(options.backgroundAlpha);\n    }\n\n    /** The background color to fill if not transparent */\n    get color(): Color\n    {\n        return this._backgroundColor;\n    }\n\n    set color(value: ColorSource)\n    {\n        this._backgroundColor.setValue(value);\n    }\n\n    /** The background color alpha. Setting this to 0 will make the canvas transparent. */\n    get alpha(): number\n    {\n        return this._backgroundColor.alpha;\n    }\n\n    set alpha(value: number)\n    {\n        this._backgroundColor.setAlpha(value);\n    }\n\n    /** The background color as an [R, G, B, A] array. */\n    get colorRgba(): RgbaArray\n    {\n        return this._backgroundColor.toArray() as RgbaArray;\n    }\n\n    /**\n     * destroys the background system\n     * @internal\n     * @ignore\n     */\n    public destroy(): void\n    {\n        // No cleanup required\n    }\n}\n","import { extensions, ExtensionType } from '../../../../extensions/Extensions';\nimport { FilterEffect } from '../../../../filters/FilterEffect';\nimport { warn } from '../../../../utils/logging/warn';\n\nimport type { BlendModeFilter } from '../../../../filters/blend-modes/BlendModeFilter';\nimport type { FilterInstruction } from '../../../../filters/FilterSystem';\nimport type { Renderer } from '../../types';\nimport type { Instruction } from '../instructions/Instruction';\nimport type { InstructionSet } from '../instructions/InstructionSet';\nimport type { InstructionPipe } from '../instructions/RenderPipe';\nimport type { Renderable } from '../Renderable';\nimport type { BLEND_MODES } from '../state/const';\n\ninterface AdvancedBlendInstruction extends Instruction\n{\n    renderPipeId: 'blendMode',\n    blendMode: BLEND_MODES,\n    activeBlend: Renderable[],\n}\n\n// class map\nconst BLEND_MODE_FILTERS: Partial<Record<BLEND_MODES, new () => BlendModeFilter>> = {} as const;\n\nextensions.handle(ExtensionType.BlendMode, (value) =>\n{\n    if (!value.name)\n    {\n        throw new Error('BlendMode extension must have a name property');\n    }\n    BLEND_MODE_FILTERS[value.name as BLEND_MODES] = value.ref;\n}, (value) =>\n{\n    delete BLEND_MODE_FILTERS[value.name as BLEND_MODES];\n});\n\n/**\n * This Pipe handles the blend mode switching of the renderer.\n * It will insert instructions into the {@link renderers.InstructionSet} to switch the blend mode according to the\n * blend modes of the scene graph.\n *\n * This pipe is were wwe handle Advanced blend modes. Advanced blend modes essentially wrap the renderables\n * in a filter that applies the blend mode.\n *\n * You only need to use this class if you are building your own render instruction set rather than letting PixiJS build\n * the instruction set for you by traversing the scene graph\n * @memberof rendering\n */\nexport class BlendModePipe implements InstructionPipe<AdvancedBlendInstruction>\n{\n    /** @ignore */\n    public static extension = {\n        type: [\n            ExtensionType.WebGLPipes,\n            ExtensionType.WebGPUPipes,\n            ExtensionType.CanvasPipes,\n        ],\n        name: 'blendMode',\n    } as const;\n\n    private _renderer: Renderer;\n\n    private _renderableList: Renderable[];\n    private _activeBlendMode: BLEND_MODES;\n\n    private _isAdvanced = false;\n\n    private _filterHash: Partial<Record<BLEND_MODES, FilterEffect>> = Object.create(null);\n\n    constructor(renderer: Renderer)\n    {\n        this._renderer = renderer;\n        this._renderer.runners.prerender.add(this);\n    }\n\n    public prerender()\n    {\n        // make sure we reset the blend modes to normal\n        // this way the next render will register any changes\n        this._activeBlendMode = 'normal';\n        this._isAdvanced = false;\n    }\n\n    /**\n     * This ensures that a blendMode switch is added to the instruction set if the blend mode has changed.\n     * @param renderable - The renderable we are adding to the instruction set\n     * @param blendMode - The blend mode of the renderable\n     * @param instructionSet - The instruction set we are adding to\n     */\n    public setBlendMode(renderable: Renderable, blendMode: BLEND_MODES, instructionSet: InstructionSet)\n    {\n        if (this._activeBlendMode === blendMode)\n        {\n            if (this._isAdvanced) this._renderableList.push(renderable);\n\n            return;\n        }\n\n        this._activeBlendMode = blendMode;\n\n        if (this._isAdvanced)\n        {\n            this._endAdvancedBlendMode(instructionSet);\n        }\n\n        this._isAdvanced = !!BLEND_MODE_FILTERS[blendMode];\n\n        if (this._isAdvanced)\n        {\n            this._beginAdvancedBlendMode(instructionSet);\n\n            this._renderableList.push(renderable);\n        }\n    }\n\n    private _beginAdvancedBlendMode(instructionSet: InstructionSet)\n    {\n        this._renderer.renderPipes.batch.break(instructionSet);\n\n        const blendMode = this._activeBlendMode;\n\n        if (!BLEND_MODE_FILTERS[blendMode as keyof typeof BLEND_MODE_FILTERS])\n        {\n            // #if _DEBUG\n            warn(`Unable to assign BlendMode: '${blendMode}'. `\n            + `You may want to include: import 'pixi.js/advanced-blend-modes'`);\n            // #endif\n\n            return;\n        }\n\n        let filterEffect = this._filterHash[blendMode];\n\n        // this does need an execute?\n        if (!filterEffect)\n        {\n            filterEffect = this._filterHash[blendMode] = new FilterEffect();\n\n            filterEffect.filters = [new BLEND_MODE_FILTERS[blendMode as keyof typeof BLEND_MODE_FILTERS]()];\n        }\n\n        const instruction: FilterInstruction = {\n            renderPipeId: 'filter',\n            action: 'pushFilter',\n            renderables: [],\n            filterEffect,\n            canBundle: false,\n        };\n\n        this._renderableList = instruction.renderables;\n        instructionSet.add(instruction);\n    }\n\n    private _endAdvancedBlendMode(instructionSet: InstructionSet)\n    {\n        this._renderableList = null;\n        this._renderer.renderPipes.batch.break(instructionSet);\n\n        instructionSet.add({\n            renderPipeId: 'filter',\n            action: 'popFilter',\n            canBundle: false,\n        });\n    }\n\n    /**\n     * called when the instruction build process is starting this will reset internally to the default blend mode\n     * @internal\n     * @ignore\n     */\n    public buildStart()\n    {\n        this._isAdvanced = false;\n    }\n\n    /**\n     * called when the instruction build process is finished, ensuring that if there is an advanced blend mode\n     * active, we add the final render instructions added to the instruction set\n     * @param instructionSet - The instruction set we are adding to\n     * @internal\n     * @ignore\n     */\n    public buildEnd(instructionSet: InstructionSet)\n    {\n        if (this._isAdvanced)\n        {\n            this._endAdvancedBlendMode(instructionSet);\n        }\n    }\n\n    /**\n     * @internal\n     * @ignore\n     */\n    public destroy()\n    {\n        this._renderer = null;\n        this._renderableList = null;\n\n        for (const i in this._filterHash)\n        {\n            this._filterHash[i as BLEND_MODES].destroy();\n        }\n\n        this._filterHash = null;\n    }\n}\n","import { ExtensionType } from '../../../../extensions/Extensions';\nimport { Container } from '../../../../scene/container/Container';\nimport { Texture } from '../texture/Texture';\n\nimport type { ColorSource } from '../../../../color/Color';\nimport type { ICanvas } from '../../../../environment/canvas/ICanvas';\nimport type { Rectangle } from '../../../../maths/shapes/Rectangle';\nimport type { Renderer } from '../../types';\nimport type { System } from '../system/System';\nimport type { GetPixelsOutput } from '../texture/GenerateCanvas';\nimport type { GenerateTextureOptions } from './GenerateTextureSystem';\n\nconst imageTypes = {\n    png: 'image/png',\n    jpg: 'image/jpeg',\n    webp: 'image/webp',\n};\n\ntype Formats = keyof typeof imageTypes;\n\n/**\n * Options for creating an image from a renderer.\n * @memberof rendering\n */\nexport interface ImageOptions\n{\n    /** The format of the image. */\n    format?: Formats;\n    /** The quality of the image. */\n    quality?: number;\n}\n\n/**\n * Options for extracting content from a renderer.\n * @memberof rendering\n */\nexport interface BaseExtractOptions\n{\n    /** The target to extract. */\n    target: Container | Texture;\n    /** The region of the target to extract. */\n    frame?: Rectangle;\n    /** The resolution of the extracted content. */\n    resolution?: number;\n    /** The color used to clear the extracted content. */\n    clearColor?: ColorSource;\n    /** Whether to enable anti-aliasing. This may affect performance. */\n    antialias?: boolean;\n}\n/**\n * Options for extracting an HTMLImage from the renderer.\n * @memberof rendering\n */\nexport type ExtractImageOptions = BaseExtractOptions & ImageOptions;\n/**\n * Options for extracting and downloading content from a renderer.\n * @memberof rendering\n */\nexport type ExtractDownloadOptions = BaseExtractOptions & {\n    /** The filename to use when downloading the content. */\n    filename: string;\n};\n/**\n * Options for extracting content from a renderer.\n * @memberof rendering\n */\nexport type ExtractOptions = BaseExtractOptions | ExtractImageOptions | ExtractDownloadOptions;\n\n/**\n * This class provides renderer-specific plugins for exporting content from a renderer.\n * For instance, these plugins can be used for saving an Image, Canvas element or for exporting the raw image data (pixels).\n *\n * Do not instantiate these plugins directly. It is available from the `renderer.extract` property.\n * @example\n * import { Application, Graphics } from 'pixi.js';\n *\n * // Create a new application (extract will be auto-added to renderer)\n * const app = new Application();\n * await app.init();\n *\n * // Draw a red circle\n * const graphics = new Graphics()\n *     .circle(0, 0, 50);\n *     .fill(0xFF0000)\n *\n * // Render the graphics as an HTMLImageElement\n * const image = await app.renderer.extract.image(graphics);\n * document.body.appendChild(image);\n * @memberof rendering\n */\nexport class ExtractSystem implements System\n{\n    /** @ignore */\n    public static extension = {\n        type: [\n            ExtensionType.WebGLSystem,\n            ExtensionType.WebGPUSystem,\n        ],\n        name: 'extract',\n    } as const;\n\n    /** Default options for creating an image. */\n    public static defaultImageOptions: ImageOptions = {\n        /** The format of the image. */\n        format: 'png' as Formats,\n        /** The quality of the image. */\n        quality: 1,\n    };\n\n    private _renderer: Renderer;\n\n    /** @param renderer - The renderer this System works for. */\n    constructor(renderer: Renderer)\n    {\n        this._renderer = renderer;\n    }\n\n    private _normalizeOptions<T extends ExtractOptions>(\n        options: ExtractImageOptions | Container | Texture,\n        defaults: Partial<T> = {},\n    ): T\n    {\n        if (options instanceof Container || options instanceof Texture)\n        {\n            return {\n                target: options,\n                ...defaults\n            } as T;\n        }\n\n        return {\n            ...defaults,\n            ...options,\n        } as T;\n    }\n\n    /**\n     * Will return a HTML Image of the target\n     * @param options - The options for creating the image, or the target to extract\n     * @returns - HTML Image of the target\n     */\n    public async image(options: ExtractImageOptions | Container | Texture): Promise<HTMLImageElement>\n    {\n        const image = new Image();\n\n        image.src = await this.base64(options);\n\n        return image;\n    }\n\n    /**\n     * Will return a base64 encoded string of this target. It works by calling\n     * `Extract.canvas` and then running toDataURL on that.\n     * @param options - The options for creating the image, or the target to extract\n     */\n    public async base64(options: ExtractImageOptions | Container | Texture): Promise<string>\n    {\n        options = this._normalizeOptions<ExtractImageOptions>(\n            options,\n            ExtractSystem.defaultImageOptions\n        );\n\n        const { format, quality } = options;\n\n        const canvas = this.canvas(options);\n\n        if (canvas.toBlob !== undefined)\n        {\n            return new Promise<string>((resolve, reject) =>\n            {\n                canvas.toBlob!((blob) =>\n                {\n                    if (!blob)\n                    {\n                        reject(new Error('ICanvas.toBlob failed!'));\n\n                        return;\n                    }\n\n                    const reader = new FileReader();\n\n                    reader.onload = () => resolve(reader.result as string);\n                    reader.onerror = reject;\n                    reader.readAsDataURL(blob);\n                }, imageTypes[format], quality);\n            });\n        }\n        if (canvas.toDataURL !== undefined)\n        {\n            return canvas.toDataURL(imageTypes[format], quality);\n        }\n        if (canvas.convertToBlob !== undefined)\n        {\n            const blob = await canvas.convertToBlob({ type: imageTypes[format], quality });\n\n            return new Promise<string>((resolve, reject) =>\n            {\n                const reader = new FileReader();\n\n                reader.onload = () => resolve(reader.result as string);\n                reader.onerror = reject;\n                reader.readAsDataURL(blob);\n            });\n        }\n\n        throw new Error('Extract.base64() requires ICanvas.toDataURL, ICanvas.toBlob, '\n            + 'or ICanvas.convertToBlob to be implemented');\n    }\n\n    /**\n     * Creates a Canvas element, renders this target to it and then returns it.\n     * @param options - The options for creating the canvas, or the target to extract\n     * @returns - A Canvas element with the texture rendered on.\n     */\n    public canvas(options: ExtractOptions | Container | Texture): ICanvas\n    {\n        options = this._normalizeOptions(options);\n\n        const target = options.target;\n\n        const renderer = this._renderer;\n\n        if (target instanceof Texture)\n        {\n            return renderer.texture.generateCanvas(target);\n        }\n\n        const texture = renderer.textureGenerator.generateTexture(options as GenerateTextureOptions);\n\n        const canvas = renderer.texture.generateCanvas(texture);\n\n        texture.destroy(true);\n\n        return canvas;\n    }\n\n    /**\n     * Will return a one-dimensional array containing the pixel data of the entire texture in RGBA\n     * order, with integer values between 0 and 255 (included).\n     * @param options - The options for extracting the image, or the target to extract\n     * @returns - One-dimensional array containing the pixel data of the entire texture\n     */\n    public pixels(options: ExtractOptions | Container | Texture): GetPixelsOutput\n    {\n        options = this._normalizeOptions(options);\n\n        const target = options.target;\n\n        const renderer = this._renderer;\n        const texture = target instanceof Texture\n            ? target\n            : renderer.textureGenerator.generateTexture(options as GenerateTextureOptions);\n\n        const pixelInfo = renderer.texture.getPixels(texture);\n\n        if (target instanceof Container)\n        {\n            // destroy generated texture\n            texture.destroy(true);\n        }\n\n        return pixelInfo;\n    }\n\n    /**\n     * Will return a texture of the target\n     * @param options - The options for creating the texture, or the target to extract\n     * @returns - A texture of the target\n     */\n    public texture(options: ExtractOptions | Container | Texture): Texture\n    {\n        options = this._normalizeOptions(options);\n\n        if (options.target instanceof Texture) return options.target;\n\n        return this._renderer.textureGenerator.generateTexture(options as GenerateTextureOptions);\n    }\n\n    /**\n     * Will extract a HTMLImage of the target and download it\n     * @param options - The options for downloading and extracting the image, or the target to extract\n     */\n    public download(options: ExtractDownloadOptions | Container | Texture)\n    {\n        options = this._normalizeOptions<ExtractDownloadOptions>(options);\n\n        const canvas = this.canvas(options);\n\n        const link = document.createElement('a');\n\n        link.download = options.filename ?? 'image.png';\n        link.href = canvas.toDataURL('image/png');\n        document.body.appendChild(link);\n        link.click();\n        document.body.removeChild(link);\n    }\n\n    /**\n     * Logs the target to the console as an image. This is a useful way to debug what's happening in the renderer.\n     * @param options - The options for logging the image, or the target to log\n     */\n    public log(options: (ExtractOptions & {width?: number}) | Container | Texture)\n    {\n        const width = options.width ?? 200;\n\n        options = this._normalizeOptions(options);\n\n        const canvas = this.canvas(options);\n\n        const base64 = canvas.toDataURL();\n\n        // eslint-disable-next-line no-console\n        console.log(`[Pixi Texture] ${canvas.width}px ${canvas.height}px`);\n\n        const style = [\n            'font-size: 1px;',\n            `padding: ${width}px ${300}px;`,\n            `background: url(${base64}) no-repeat;`,\n            'background-size: contain;',\n        ].join(' ');\n\n        // eslint-disable-next-line no-console\n        console.log('%c ', style);\n    }\n\n    public destroy(): void\n    {\n        this._renderer = null as any as Renderer;\n    }\n}\n","import { TextureSource } from './sources/TextureSource';\nimport { Texture } from './Texture';\n\nimport type { TextureSourceOptions } from './sources/TextureSource';\n\n/**\n * A render texture, extends `Texture`.\n * @see {@link rendering.Texture}\n * @memberof rendering\n */\nexport class RenderTexture extends Texture\n{\n    public static create(options: TextureSourceOptions): RenderTexture\n    {\n        return new RenderTexture({\n            source: new TextureSource(options)\n        });\n    }\n\n    /**\n     * Resizes the render texture.\n     * @param width - The new width of the render texture.\n     * @param height - The new height of the render texture.\n     * @param resolution - The new resolution of the render texture.\n     * @returns This texture.\n     */\n    public resize(width: number, height: number, resolution?: number): this\n    {\n        this.source.resize(width, height, resolution);\n\n        return this;\n    }\n}\n","import { Color, type ColorSource } from '../../../../color/Color';\nimport { ExtensionType } from '../../../../extensions/Extensions';\nimport { Matrix } from '../../../../maths/matrix/Matrix';\nimport { Rectangle } from '../../../../maths/shapes/Rectangle';\nimport { Bounds } from '../../../../scene/container/bounds/Bounds';\nimport { getLocalBounds } from '../../../../scene/container/bounds/getLocalBounds';\nimport { Container } from '../../../../scene/container/Container';\nimport { RenderTexture } from '../texture/RenderTexture';\n\nimport type { Renderer } from '../../types';\nimport type { System } from '../system/System';\nimport type { TextureSourceOptions } from '../texture/sources/TextureSource';\n\nexport type GenerateTextureSourceOptions = Omit<TextureSourceOptions, 'resource' | 'width' | 'height' | 'resolution'>;\n\n/**\n * Options for generating a texture from a container.\n * @memberof rendering\n */\nexport type GenerateTextureOptions =\n{\n    /** The container to generate the texture from */\n    target: Container;\n    /**\n     * The region of the container, that shall be rendered,\n     * if no region is specified, defaults to the local bounds of the container.\n     */\n    frame?: Rectangle;\n    /** The resolution of the texture being generated. */\n    resolution?: number;\n    /** The color used to clear the texture. */\n    clearColor?: ColorSource;\n    /** Whether to enable anti-aliasing. This may affect performance. */\n    antialias?: boolean;\n    /** The options passed to the texture source. */\n    textureSourceOptions?: GenerateTextureSourceOptions,\n};\n\nconst tempRect = new Rectangle();\nconst tempBounds = new Bounds();\nconst noColor: ColorSource = [0, 0, 0, 0];\n\n/**\n * System that manages the generation of textures from the renderer\n *\n *\n * Do not instantiate these plugins directly. It is available from the `renderer.textureGenerator` property.\n * @memberof rendering\n */\nexport class GenerateTextureSystem implements System\n{\n    /** @ignore */\n    public static extension = {\n        type: [\n            ExtensionType.WebGLSystem,\n            ExtensionType.WebGPUSystem,\n        ],\n        name: 'textureGenerator',\n    } as const;\n\n    private readonly _renderer: Renderer;\n\n    constructor(renderer: Renderer)\n    {\n        this._renderer = renderer;\n    }\n\n    /**\n     * A Useful function that returns a texture of the display object that can then be used to create sprites\n     * This can be quite useful if your container is complicated and needs to be reused multiple times.\n     * @param {GenerateTextureOptions | Container} options - Generate texture options.\n     * @param {Container} [options.container] - If not given, the renderer's resolution is used.\n     * @param {Rectangle} options.region - The region of the container, that shall be rendered,\n     * @param {number} [options.resolution] - The resolution of the texture being generated.\n     *        if no region is specified, defaults to the local bounds of the container.\n     * @param {GenerateTextureSourceOptions} [options.textureSourceOptions] - Texture options for GPU.\n     * @returns a shiny new texture of the container passed in\n     */\n    public generateTexture(options: GenerateTextureOptions | Container): RenderTexture\n    {\n        if (options instanceof Container)\n        {\n            options = {\n                target: options,\n                frame: undefined,\n                textureSourceOptions: {},\n                resolution: undefined,\n            };\n        }\n\n        const resolution = options.resolution || this._renderer.resolution;\n        const antialias = options.antialias || this._renderer.view.antialias;\n\n        const container = options.target;\n\n        let clearColor = options.clearColor;\n\n        if (clearColor)\n        {\n            const isRGBAArray = Array.isArray(clearColor) && clearColor.length === 4;\n\n            clearColor = isRGBAArray ? clearColor : Color.shared.setValue(clearColor).toArray();\n        }\n        else\n        {\n            clearColor = noColor;\n        }\n\n        const region = options.frame?.copyTo(tempRect)\n            || getLocalBounds(container, tempBounds).rectangle;\n\n        region.width = Math.max(region.width, 1 / resolution) | 0;\n        region.height = Math.max(region.height, 1 / resolution) | 0;\n\n        const target = RenderTexture.create({\n            ...options.textureSourceOptions,\n            width: region.width,\n            height: region.height,\n            resolution,\n            antialias,\n        });\n\n        const transform = Matrix.shared.translate(-region.x, -region.y);\n\n        this._renderer.render({\n            container,\n            transform,\n            target,\n            clearColor,\n        });\n\n        target.source.updateMipmaps();\n\n        return target;\n    }\n\n    public destroy(): void\n    {\n        (this._renderer as null) = null;\n    }\n}\n","import { ExtensionType } from '../../../../extensions/Extensions';\nimport { Matrix } from '../../../../maths/matrix/Matrix';\nimport { Point } from '../../../../maths/point/Point';\nimport { color32BitToUniform } from '../../../../scene/graphics/gpu/colorToUniform';\nimport { BindGroup } from '../../gpu/shader/BindGroup';\nimport { type Renderer, RendererType } from '../../types';\nimport { UniformGroup } from '../shader/UniformGroup';\n\nimport type { PointData } from '../../../../maths/point/PointData';\nimport type { GlRenderTargetSystem } from '../../gl/renderTarget/GlRenderTargetSystem';\nimport type { GpuRenderTargetSystem } from '../../gpu/renderTarget/GpuRenderTargetSystem';\nimport type { WebGPURenderer } from '../../gpu/WebGPURenderer';\nimport type { UboSystem } from '../shader/UboSystem';\nimport type { System } from '../system/System';\n\nexport type GlobalUniformGroup = UniformGroup<{\n    uProjectionMatrix: { value: Matrix; type: 'mat3x3<f32>' }\n    uWorldTransformMatrix: { value: Matrix; type: 'mat3x3<f32>' }\n    uWorldColorAlpha: { value: Float32Array; type: 'vec4<f32>' }\n    uResolution: { value: number[]; type: 'vec2<f32>' }\n}>;\n\nexport interface GlobalUniformOptions\n{\n    size?: number[],\n    projectionMatrix?: Matrix,\n    worldTransformMatrix?: Matrix\n    worldColor?: number\n    offset?: PointData\n}\n\nexport interface GlobalUniformData\n{\n    projectionMatrix: Matrix\n    worldTransformMatrix: Matrix\n    worldColor: number\n    resolution: number[]\n    offset: PointData\n    bindGroup: BindGroup\n}\n\nexport interface GlobalUniformRenderer\n{\n    renderTarget: GlRenderTargetSystem | GpuRenderTargetSystem\n    renderPipes: Renderer['renderPipes'];\n    ubo: UboSystem;\n    type: RendererType;\n}\n\n/**\n * System plugin to the renderer to manage global uniforms for the renderer.\n * @memberof rendering\n */\nexport class GlobalUniformSystem implements System\n{\n    /** @ignore */\n    public static extension = {\n        type: [\n            ExtensionType.WebGLSystem,\n            ExtensionType.WebGPUSystem,\n            ExtensionType.CanvasSystem,\n        ],\n        name: 'globalUniforms',\n    } as const;\n\n    private readonly _renderer: GlobalUniformRenderer;\n\n    private _stackIndex = 0;\n    private _globalUniformDataStack: GlobalUniformData[] = [];\n\n    private readonly _uniformsPool: GlobalUniformGroup[] = [];\n    private readonly _activeUniforms: GlobalUniformGroup[] = [];\n\n    private readonly _bindGroupPool: BindGroup[] = [];\n    private readonly _activeBindGroups: BindGroup[] = [];\n\n    private _currentGlobalUniformData: GlobalUniformData;\n\n    constructor(renderer: GlobalUniformRenderer)\n    {\n        this._renderer = renderer;\n    }\n\n    public reset()\n    {\n        this._stackIndex = 0;\n\n        for (let i = 0; i < this._activeUniforms.length; i++)\n        {\n            this._uniformsPool.push(this._activeUniforms[i]);\n        }\n\n        for (let i = 0; i < this._activeBindGroups.length; i++)\n        {\n            this._bindGroupPool.push(this._activeBindGroups[i]);\n        }\n\n        this._activeUniforms.length = 0;\n        this._activeBindGroups.length = 0;\n    }\n\n    public start(options: GlobalUniformOptions): void\n    {\n        this.reset();\n\n        this.push(options);\n    }\n\n    public bind({\n        size,\n        projectionMatrix,\n        worldTransformMatrix,\n        worldColor,\n        offset,\n    }: GlobalUniformOptions)\n    {\n        const renderTarget = this._renderer.renderTarget.renderTarget;\n\n        const currentGlobalUniformData = this._stackIndex ? this._globalUniformDataStack[this._stackIndex - 1] : {\n            projectionData: renderTarget,\n            worldTransformMatrix: new Matrix(),\n            worldColor: 0xFFFFFFFF,\n            offset: new Point(),\n        };\n\n        const globalUniformData: GlobalUniformData = {\n            projectionMatrix: projectionMatrix || this._renderer.renderTarget.projectionMatrix,\n            resolution: size || renderTarget.size,\n            worldTransformMatrix: worldTransformMatrix || currentGlobalUniformData.worldTransformMatrix,\n            worldColor: worldColor || currentGlobalUniformData.worldColor,\n            offset: offset || currentGlobalUniformData.offset,\n            bindGroup: null,\n        };\n\n        const uniformGroup = this._uniformsPool.pop() || this._createUniforms();\n\n        this._activeUniforms.push(uniformGroup);\n\n        const uniforms = uniformGroup.uniforms;\n\n        uniforms.uProjectionMatrix = globalUniformData.projectionMatrix;\n\n        uniforms.uResolution = globalUniformData.resolution;\n\n        uniforms.uWorldTransformMatrix.copyFrom(globalUniformData.worldTransformMatrix);\n\n        uniforms.uWorldTransformMatrix.tx -= globalUniformData.offset.x;\n        uniforms.uWorldTransformMatrix.ty -= globalUniformData.offset.y;\n\n        color32BitToUniform(\n            globalUniformData.worldColor,\n            uniforms.uWorldColorAlpha,\n            0\n        );\n\n        uniformGroup.update();\n\n        let bindGroup: BindGroup;\n\n        if ((this._renderer as WebGPURenderer).renderPipes.uniformBatch)\n        {\n            bindGroup = (this._renderer as WebGPURenderer).renderPipes.uniformBatch.getUniformBindGroup(uniformGroup, false);\n        }\n        else\n        {\n            bindGroup = this._bindGroupPool.pop() || new BindGroup();\n            this._activeBindGroups.push(bindGroup);\n            bindGroup.setResource(uniformGroup, 0);\n        }\n\n        globalUniformData.bindGroup = bindGroup;\n\n        this._currentGlobalUniformData = globalUniformData;\n    }\n\n    public push(options: GlobalUniformOptions)\n    {\n        this.bind(options);\n\n        this._globalUniformDataStack[this._stackIndex++] = this._currentGlobalUniformData;\n    }\n\n    public pop()\n    {\n        this._currentGlobalUniformData = this._globalUniformDataStack[--this._stackIndex - 1];\n\n        // for webGL we need to update the uniform group here\n        // as we are not using bind groups\n        if (this._renderer.type === RendererType.WEBGL)\n        {\n            (this._currentGlobalUniformData.bindGroup.resources[0] as UniformGroup).update();\n        }\n    }\n\n    get bindGroup(): BindGroup\n    {\n        return this._currentGlobalUniformData.bindGroup;\n    }\n\n    get globalUniformData()\n    {\n        return this._currentGlobalUniformData;\n    }\n\n    get uniformGroup()\n    {\n        return this._currentGlobalUniformData.bindGroup.resources[0] as UniformGroup;\n    }\n\n    private _createUniforms(): GlobalUniformGroup\n    {\n        const globalUniforms = new UniformGroup({\n            uProjectionMatrix: { value: new Matrix(), type: 'mat3x3<f32>' },\n            uWorldTransformMatrix: { value: new Matrix(), type: 'mat3x3<f32>' },\n            // TODO - someone smart - set this to be a unorm8x4 rather than a vec4<f32>\n            uWorldColorAlpha: { value: new Float32Array(4), type: 'vec4<f32>' },\n            uResolution: { value: [0, 0], type: 'vec2<f32>' },\n        }, {\n            isStatic: true,\n        });\n\n        return globalUniforms;\n    }\n\n    public destroy()\n    {\n        (this._renderer as null) = null;\n    }\n}\n","import { ExtensionType } from '../../../extensions/Extensions';\nimport { Ticker } from '../../../ticker/Ticker';\n\nimport type { System } from './system/System';\n\n// start at one too keep it positive!\nlet uid = 1;\n\n/**\n * The SchedulerSystem manages scheduled tasks with specific intervals.\n * @memberof rendering\n */\nexport class SchedulerSystem implements System<null>\n{\n    /** @ignore */\n    public static extension = {\n        type: [\n            ExtensionType.WebGLSystem,\n            ExtensionType.WebGPUSystem,\n            ExtensionType.CanvasSystem,\n        ],\n        name: 'scheduler',\n        priority: 0,\n    } as const;\n\n    private readonly _tasks: {\n        func: (elapsed: number) => void;\n        duration: number;\n        offset: number\n        start: number;\n        last: number;\n        repeat: boolean;\n        id: number;\n    }[] = [];\n\n    /** a small off set to apply to the repeat schedules. This is just to make sure they run at slightly different times */\n    private _offset = 0;\n\n    /** Initializes the scheduler system and starts the ticker. */\n    public init(): void\n    {\n        Ticker.system.add(this._update, this);\n    }\n\n    /**\n     * Schedules a repeating task.\n     * @param func - The function to execute.\n     * @param duration - The interval duration in milliseconds.\n     * @param useOffset - this will spread out tasks so that they do not all run at the same time\n     * @returns The unique identifier for the scheduled task.\n     */\n    public repeat(func: (elapsed: number) => void, duration: number, useOffset = true): number\n    {\n        const id = uid++;\n\n        let offset = 0;\n\n        if (useOffset)\n        {\n            this._offset += 1000;\n            offset = this._offset;\n        }\n\n        this._tasks.push({\n            func,\n            duration,\n            start: performance.now(),\n            offset,\n            last: performance.now(),\n            repeat: true,\n            id\n        });\n\n        return id;\n    }\n\n    /**\n     * Cancels a scheduled task.\n     * @param id - The unique identifier of the task to cancel.\n     */\n    public cancel(id: number): void\n    {\n        for (let i = 0; i < this._tasks.length; i++)\n        {\n            if (this._tasks[i].id === id)\n            {\n                this._tasks.splice(i, 1);\n\n                return;\n            }\n        }\n    }\n\n    /**\n     * Updates and executes the scheduled tasks.\n     * @private\n     */\n    private _update(): void\n    {\n        const now = performance.now();\n\n        for (let i = 0; i < this._tasks.length; i++)\n        {\n            const task = this._tasks[i];\n\n            if ((now - task.offset) - task.last >= task.duration)\n            {\n                const elapsed = now - task.start;\n\n                task.func(elapsed);\n                task.last = now;\n            }\n        }\n    }\n\n    /**\n     * Destroys the scheduler system and removes all tasks.\n     * @internal\n     * @ignore\n     */\n    public destroy(): void\n    {\n        Ticker.system.remove(this._update, this);\n\n        this._tasks.length = 0;\n    }\n}\n","import { DOMAdapter } from '../environment/adapter';\nimport { VERSION } from './const';\n\nlet saidHello = false;\n\n/**\n * Prints out the version and renderer information for this running instance of PixiJS.\n * @param type - The name of the renderer this instance is using.\n * @returns {void}\n */\nexport function sayHello(type: string): void\n{\n    if (saidHello)\n    {\n        return;\n    }\n\n    if (DOMAdapter.get().getNavigator().userAgent.toLowerCase().indexOf('chrome') > -1)\n    {\n        const args = [\n            `%c  %c  %c  %c  %c PixiJS %c v${VERSION} (${type}) http://www.pixijs.com/\\n\\n`,\n            'background: #E72264; padding:5px 0;',\n            'background: #6CA2EA; padding:5px 0;',\n            'background: #B5D33D; padding:5px 0;',\n            'background: #FED23F; padding:5px 0;',\n            'color: #FFFFFF; background: #E72264; padding:5px 0;',\n            'color: #E72264; background: #FFFFFF; padding:5px 0;',\n        ];\n\n        globalThis.console.log(...args);\n    }\n    else if (globalThis.console)\n    {\n        globalThis.console.log(`PixiJS ${VERSION} - ${type} - http://www.pixijs.com/`);\n    }\n\n    saidHello = true;\n}\n","import { ExtensionType } from '../../../../extensions/Extensions';\nimport { sayHello } from '../../../../utils/sayHello';\nimport { type Renderer, RendererType } from '../../types';\n\nimport type { WebGLRenderer } from '../../gl/WebGLRenderer';\nimport type { System } from '../system/System';\n\n/**\n * Options for the startup system.\n * @property {boolean} [hello=false] - Whether to log the version and type information of renderer to console.\n * @memberof rendering\n */\nexport interface HelloSystemOptions\n{\n    /**\n     * Whether to log the version and type information of renderer to console.\n     * @memberof rendering.SharedRendererOptions\n     * @default false\n     */\n    hello: boolean;\n}\n\n/**\n * A simple system responsible for initiating the renderer.\n * @memberof rendering\n */\nexport class HelloSystem implements System<HelloSystemOptions>\n{\n    /** @ignore */\n    public static extension = {\n        type: [\n            ExtensionType.WebGLSystem,\n            ExtensionType.WebGPUSystem,\n            ExtensionType.CanvasSystem,\n        ],\n        name: 'hello',\n        priority: -2,\n    } as const;\n\n    /** The default options for the system. */\n    public static defaultOptions: HelloSystemOptions = {\n        /** {@link WebGLOptions.hello} */\n        hello: false,\n    };\n\n    private readonly _renderer: Renderer;\n\n    constructor(renderer: Renderer)\n    {\n        this._renderer = renderer;\n    }\n\n    /**\n     * It all starts here! This initiates every system, passing in the options for any system by name.\n     * @param options - the config for the renderer and all its systems\n     */\n    public init(options: HelloSystemOptions): void\n    {\n        if (options.hello)\n        {\n            let name = this._renderer.name;\n\n            if (this._renderer.type === RendererType.WEBGL)\n            {\n                name += ` ${(this._renderer as WebGLRenderer).context.webGLVersion}`;\n            }\n\n            sayHello(name);\n        }\n    }\n}\n","/**\n * Takes a hash and removes all the `undefined`/`null` values from it.\n * In PixiJS, we tend to null properties instead of using 'delete' for performance reasons.\n * However, in some cases, this could be a problem if the hash grows too large over time,\n * this function can be used to clean a hash.\n * @param hash - The hash to clean.\n * @returns A new hash with all the `undefined`/`null` values removed.\n * @memberof utils\n */\nexport function cleanHash<T>(hash: Record<string, T>): Record<string, T>\n{\n    let clean = false;\n\n    for (const i in hash)\n    {\n        // eslint-disable-next-line eqeqeq\n        if (hash[i] == undefined)\n        {\n            clean = true;\n            break;\n        }\n    }\n\n    if (!clean) return hash;\n\n    const cleanHash = Object.create(null);\n\n    for (const i in hash)\n    {\n        const value = hash[i];\n\n        if (value)\n        {\n            cleanHash[i] = value;\n        }\n    }\n\n    return cleanHash;\n}\n\n/**\n * Removes all `undefined`/`null` elements from the given array and compacts the array.\n *\n * This function iterates through the array, shifting non-undefined elements to the left\n * to fill gaps created by `undefined` elements. The length of the array is then adjusted\n * to remove the trailing `undefined` elements.\n * @param arr - The array to be cleaned.\n * @returns The cleaned array with all `undefined` elements removed.\n * @example\n * // Example usage:\n * const arr = [1, undefined, 2, undefined, 3];\n * const cleanedArr = cleanArray(arr);\n * console.log(cleanedArr); // Output: [1, 2, 3]\n * @memberof utils\n */\nexport function cleanArray<T>(arr: T[]): T[]\n{\n    let offset = 0;\n\n    for (let i = 0; i < arr.length; i++)\n    {\n        // eslint-disable-next-line eqeqeq\n        if (arr[i] == undefined)\n        {\n            offset++;\n        }\n        else\n        {\n            arr[i - offset] = arr[i];\n        }\n    }\n\n    arr.length -= offset;\n\n    return arr;\n}\n","import { ExtensionType } from '../../../../extensions/Extensions';\nimport { type RenderGroup } from '../../../../scene/container/RenderGroup';\nimport { cleanArray, cleanHash } from '../../../../utils/data/clean';\nimport { type RenderOptions } from '../system/AbstractRenderer';\n\nimport type { Container } from '../../../../scene/container/Container';\nimport type { Renderer } from '../../types';\nimport type { RenderPipe } from '../instructions/RenderPipe';\nimport type { Renderable } from '../Renderable';\nimport type { System } from '../system/System';\n\nlet renderableGCTick = 0;\n\n/**\n * Options for the {@link RenderableGCSystem}.\n * @memberof rendering\n * @property {boolean} [renderableGCActive=true] - If set to true, this will enable the garbage collector on the renderables.\n * @property {number} [renderableGCAMaxIdle=60000] -\n * The maximum idle frames before a texture is destroyed by garbage collection.\n * @property {number} [renderableGCCheckCountMax=60000] - time between two garbage collections.\n */\nexport interface RenderableGCSystemOptions\n{\n    /**\n     * If set to true, this will enable the garbage collector on the GPU.\n     * @default true\n     * @memberof rendering.SharedRendererOptions\n     */\n    renderableGCActive: boolean;\n    /**\n     * The maximum idle frames before a texture is destroyed by garbage collection.\n     * @default 60 * 60\n     * @memberof rendering.SharedRendererOptions\n     */\n    renderableGCMaxUnusedTime: number;\n    /**\n     * Frames between two garbage collections.\n     * @default 600\n     * @memberof rendering.SharedRendererOptions\n     */\n    renderableGCFrequency: number;\n}\n\n/**\n * The RenderableGCSystem is responsible for cleaning up GPU resources that are no longer being used.\n *\n * When rendering objects like sprites, text, etc - GPU resources are created and managed by the renderer.\n * If these objects are no longer needed but not properly destroyed (via sprite.destroy()), their GPU resources\n * would normally leak. This system prevents that by automatically cleaning up unused GPU resources.\n *\n * Key features:\n * - Runs every 30 seconds by default to check for unused resources\n * - Cleans up resources not rendered for over 1 minute\n * - Works independently of rendering - will clean up even when not actively rendering\n * - When cleaned up resources are needed again, new GPU objects are quickly assigned from a pool\n * - Can be disabled with renderableGCActive:false for manual control\n *\n * Best practices:\n * - Always call destroy() explicitly when done with renderables (e.g. sprite.destroy())\n * - This system is a safety net, not a replacement for proper cleanup\n * - Adjust frequency and timeouts via options if needed\n *\n * Example:\n * ```js\n * // Sprite created but reference lost without destroy\n * let sprite = new Sprite(texture);\n *\n * // internally the renderer will assign a resource to the sprite\n * renderer.render(sprite);\n *\n * sprite = null; // Reference lost but GPU resources still exist\n *\n * // After 1 minute of not being rendered:\n * // - RenderableGC will clean up the sprite's GPU resources\n * // - JS garbage collector can then clean up the sprite itself\n * ```\n * @implements {System<RenderableGCSystemOptions>}\n */\nexport class RenderableGCSystem implements System<RenderableGCSystemOptions>\n{\n    /**\n     * Extension metadata for registering this system with the renderer.\n     * @ignore\n     */\n    public static extension = {\n        type: [\n            ExtensionType.WebGLSystem,\n            ExtensionType.WebGPUSystem,\n        ],\n        name: 'renderableGC',\n        priority: 0\n    } as const;\n\n    /**\n     * Default configuration options for the garbage collection system.\n     * These can be overridden when initializing the renderer.\n     */\n    public static defaultOptions: RenderableGCSystemOptions = {\n        /** Enable/disable the garbage collector */\n        renderableGCActive: true,\n        /** Time in ms before an unused resource is collected (default 1 minute) */\n        renderableGCMaxUnusedTime: 60000,\n        /** How often to run garbage collection in ms (default 30 seconds) */\n        renderableGCFrequency: 30000,\n    };\n\n    /** Maximum time in ms a resource can be unused before being garbage collected */\n    public maxUnusedTime: number;\n\n    /** Reference to the renderer this system belongs to */\n    private _renderer: Renderer;\n\n    /** Array of renderables being tracked for garbage collection */\n    private readonly _managedRenderables: Renderable[] = [];\n    /** ID of the main GC scheduler handler */\n    private _handler: number;\n    /** How frequently GC runs in ms */\n    private _frequency: number;\n    /** Current timestamp used for age calculations */\n    private _now: number;\n\n    /** Array of hash objects being tracked for cleanup */\n    private readonly _managedHashes: {context: any, hash: string}[] = [];\n    /** ID of the hash cleanup scheduler handler */\n    private _hashHandler: number;\n\n    /** Array of arrays being tracked for cleanup */\n    private readonly _managedArrays: {context: any, hash: string}[] = [];\n    /** ID of the array cleanup scheduler handler */\n    private _arrayHandler: number;\n\n    /**\n     * Creates a new RenderableGCSystem instance.\n     * @param renderer - The renderer this garbage collection system works for\n     */\n    constructor(renderer: Renderer)\n    {\n        this._renderer = renderer;\n    }\n\n    /**\n     * Initializes the garbage collection system with the provided options.\n     * @param options - Configuration options for the renderer\n     */\n    public init(options: RenderableGCSystemOptions): void\n    {\n        options = { ...RenderableGCSystem.defaultOptions, ...options };\n\n        this.maxUnusedTime = options.renderableGCMaxUnusedTime;\n        this._frequency = options.renderableGCFrequency;\n\n        this.enabled = options.renderableGCActive;\n    }\n\n    /**\n     * Gets whether the garbage collection system is currently enabled.\n     * @returns True if GC is enabled, false otherwise\n     */\n    get enabled(): boolean\n    {\n        return !!this._handler;\n    }\n\n    /**\n     * Enables or disables the garbage collection system.\n     * When enabled, schedules periodic cleanup of resources.\n     * When disabled, cancels all scheduled cleanups.\n     */\n    set enabled(value: boolean)\n    {\n        if (this.enabled === value) return;\n\n        if (value)\n        {\n            // Schedule periodic garbage collection\n            this._handler = this._renderer.scheduler.repeat(\n                () => this.run(),\n                this._frequency,\n                false\n            );\n\n            // Schedule periodic hash table cleanup\n            this._hashHandler = this._renderer.scheduler.repeat(\n                () =>\n                {\n                    for (const hash of this._managedHashes)\n                    {\n                        hash.context[hash.hash] = cleanHash(hash.context[hash.hash]);\n                    }\n                },\n                this._frequency\n            );\n\n            // Schedule periodic array cleanup\n            this._arrayHandler = this._renderer.scheduler.repeat(\n                () =>\n                {\n                    for (const array of this._managedArrays)\n                    {\n                        cleanArray(array.context[array.hash]);\n                    }\n                },\n                this._frequency\n            );\n        }\n        else\n        {\n            // Cancel all scheduled cleanups\n            this._renderer.scheduler.cancel(this._handler);\n            this._renderer.scheduler.cancel(this._hashHandler);\n            this._renderer.scheduler.cancel(this._arrayHandler);\n        }\n    }\n\n    /**\n     * Adds a hash table to be managed by the garbage collector.\n     * @param context - The object containing the hash table\n     * @param hash - The property name of the hash table\n     */\n    public addManagedHash<T>(context: T, hash: string): void\n    {\n        this._managedHashes.push({ context, hash: hash as string });\n    }\n\n    /**\n     * Adds an array to be managed by the garbage collector.\n     * @param context - The object containing the array\n     * @param hash - The property name of the array\n     */\n    public addManagedArray<T>(context: T, hash: string): void\n    {\n        this._managedArrays.push({ context, hash: hash as string });\n    }\n\n    /**\n     * Updates the GC timestamp and tracking before rendering.\n     * @param options - The render options\n     * @param options.container - The container to render\n     */\n    public prerender({\n        container\n    }: RenderOptions): void\n    {\n        this._now = performance.now();\n\n        // The gcTick is a monotonically increasing counter that tracks render cycles\n        // Each time we render, we increment the global renderableGCTick counter\n        // and assign the new tick value to the render group being rendered.\n        // This lets us know which render groups were rendered in the current frame\n        // versus ones that haven't been rendered recently.\n        // The instruction set also gets updated with this tick value to track\n        // when its renderables were last used.\n        container.renderGroup.gcTick = renderableGCTick++;\n\n        this._updateInstructionGCTick(container.renderGroup, container.renderGroup.gcTick);\n    }\n\n    /**\n     * Starts tracking a renderable for garbage collection.\n     * @param renderable - The renderable to track\n     */\n    public addRenderable(renderable: Renderable): void\n    {\n        if (!this.enabled) return;\n\n        if (renderable._lastUsed === -1)\n        {\n            this._managedRenderables.push(renderable);\n            renderable.once('destroyed', this._removeRenderable, this);\n        }\n\n        renderable._lastUsed = this._now;\n    }\n\n    /**\n     * Performs garbage collection by cleaning up unused renderables.\n     * Removes renderables that haven't been used for longer than maxUnusedTime.\n     */\n    public run(): void\n    {\n        const now = this._now;\n        const managedRenderables = this._managedRenderables;\n        const renderPipes = this._renderer.renderPipes;\n        let offset = 0;\n\n        for (let i = 0; i < managedRenderables.length; i++)\n        {\n            const renderable = managedRenderables[i];\n\n            if (renderable === null)\n            {\n                offset++;\n                continue;\n            }\n\n            const renderGroup = renderable.renderGroup ?? renderable.parentRenderGroup;\n            const currentTick = renderGroup?.instructionSet?.gcTick ?? -1;\n\n            // Update last used time if the renderable's group was rendered this tick\n            if ((renderGroup?.gcTick ?? 0) === currentTick)\n            {\n                renderable._lastUsed = now;\n            }\n\n            // Clean up if unused for too long\n            if (now - renderable._lastUsed > this.maxUnusedTime)\n            {\n                if (!renderable.destroyed)\n                {\n                    const rp = renderPipes as unknown as Record<string, RenderPipe>;\n\n                    if (renderGroup)renderGroup.structureDidChange = true;\n\n                    rp[renderable.renderPipeId].destroyRenderable(renderable);\n                }\n\n                renderable._lastUsed = -1;\n                offset++;\n                renderable.off('destroyed', this._removeRenderable, this);\n            }\n            else\n            {\n                managedRenderables[i - (offset)] = renderable;\n            }\n        }\n\n        managedRenderables.length -= offset;\n    }\n\n    /** Cleans up the garbage collection system. Disables GC and removes all tracked resources. */\n    public destroy(): void\n    {\n        this.enabled = false;\n        this._renderer = null as any as Renderer;\n        this._managedRenderables.length = 0;\n        this._managedHashes.length = 0;\n        this._managedArrays.length = 0;\n    }\n\n    /**\n     * Removes a renderable from being tracked when it's destroyed.\n     * @param renderable - The renderable to stop tracking\n     */\n    private _removeRenderable(renderable: Container): void\n    {\n        const index = this._managedRenderables.indexOf(renderable as Renderable);\n\n        if (index >= 0)\n        {\n            renderable.off('destroyed', this._removeRenderable, this);\n            this._managedRenderables[index] = null;\n        }\n    }\n\n    /**\n     * Updates the GC tick counter for a render group and its children.\n     * @param renderGroup - The render group to update\n     * @param gcTick - The new tick value\n     */\n    private _updateInstructionGCTick(renderGroup: RenderGroup, gcTick: number): void\n    {\n        renderGroup.instructionSet.gcTick = gcTick;\n\n        for (const child of renderGroup.renderGroupChildren)\n        {\n            this._updateInstructionGCTick(child, gcTick);\n        }\n    }\n}\n","import { ExtensionType } from '../../../../extensions/Extensions';\n\nimport type { Renderer } from '../../types';\nimport type { System } from '../system/System';\n\n/**\n * Options for the {@link TextureGCSystem}.\n * @memberof rendering\n * @property {boolean} [textureGCActive=true] - If set to true, this will enable the garbage collector on the GPU.\n * @property {number} [textureGCAMaxIdle=60 * 60] -\n * The maximum idle frames before a texture is destroyed by garbage collection.\n * @property {number} [textureGCCheckCountMax=600] - Frames between two garbage collections.\n */\nexport interface TextureGCSystemOptions\n{\n    /**\n     * If set to true, this will enable the garbage collector on the GPU.\n     * @default true\n     * @memberof rendering.SharedRendererOptions\n     */\n    textureGCActive: boolean;\n    /**\n     * @deprecated since 8.3.0\n     * @see {@link TextureGCSystem.textureGCMaxIdle}\n     * @memberof rendering.SharedRendererOptions\n     */\n    textureGCAMaxIdle: number;\n    /**\n     * The maximum idle frames before a texture is destroyed by garbage collection.\n     * @default 60 * 60\n     * @memberof rendering.SharedRendererOptions\n     */\n    textureGCMaxIdle: number;\n    /**\n     * Frames between two garbage collections.\n     * @default 600\n     * @memberof rendering.SharedRendererOptions\n     */\n    textureGCCheckCountMax: number;\n}\n/**\n * System plugin to the renderer to manage texture garbage collection on the GPU,\n * ensuring that it does not get clogged up with textures that are no longer being used.\n * @memberof rendering\n */\nexport class TextureGCSystem implements System<TextureGCSystemOptions>\n{\n    /** @ignore */\n    public static extension = {\n        type: [\n            ExtensionType.WebGLSystem,\n            ExtensionType.WebGPUSystem,\n        ],\n        name: 'textureGC',\n    } as const;\n\n    /** default options for the TextureGCSystem */\n    public static defaultOptions: TextureGCSystemOptions = {\n        /**\n         * If set to true, this will enable the garbage collector on the GPU.\n         * @default true\n         */\n        textureGCActive: true,\n        /**\n         * @deprecated since 8.3.0\n         * @see {@link TextureGCSystem.textureGCMaxIdle}\n         */\n        textureGCAMaxIdle: null,\n        /**\n         * The maximum idle frames before a texture is destroyed by garbage collection.\n         * @default 60 * 60\n         */\n        textureGCMaxIdle: 60 * 60,\n        /**\n         * Frames between two garbage collections.\n         * @default 600\n         */\n        textureGCCheckCountMax: 600,\n    };\n\n    /**\n     * Frame count since started.\n     * @readonly\n     */\n    public count: number;\n\n    /**\n     * Frame count since last garbage collection.\n     * @readonly\n     */\n    public checkCount: number;\n\n    /**\n     * Maximum idle frames before a texture is destroyed by garbage collection.\n     * @see TextureGCSystem.defaultMaxIdle\n     */\n    public maxIdle: number;\n\n    /**\n     * Frames between two garbage collections.\n     * @see TextureGCSystem.defaultCheckCountMax\n     */\n    public checkCountMax: number;\n\n    /**\n     * Current garbage collection mode.\n     * @see TextureGCSystem.defaultMode\n     */\n    public active: boolean;\n    private _renderer: Renderer;\n\n    /** @param renderer - The renderer this System works for. */\n    constructor(renderer: Renderer)\n    {\n        this._renderer = renderer;\n\n        this.count = 0;\n        this.checkCount = 0;\n    }\n\n    public init(options: TextureGCSystemOptions): void\n    {\n        options = { ...TextureGCSystem.defaultOptions, ...options };\n\n        this.checkCountMax = options.textureGCCheckCountMax;\n        this.maxIdle = options.textureGCAMaxIdle ?? options.textureGCMaxIdle;\n        this.active = options.textureGCActive;\n    }\n\n    /**\n     * Checks to see when the last time a texture was used.\n     * If the texture has not been used for a specified amount of time, it will be removed from the GPU.\n     */\n    protected postrender(): void\n    {\n        if (!this._renderer.renderingToScreen)\n        {\n            return;\n        }\n\n        this.count++;\n\n        if (!this.active) return;\n\n        this.checkCount++;\n\n        if (this.checkCount > this.checkCountMax)\n        {\n            this.checkCount = 0;\n\n            this.run();\n        }\n    }\n\n    /**\n     * Checks to see when the last time a texture was used.\n     * If the texture has not been used for a specified amount of time, it will be removed from the GPU.\n     */\n    public run(): void\n    {\n        const managedTextures = this._renderer.texture.managedTextures;\n\n        for (let i = 0; i < managedTextures.length; i++)\n        {\n            const texture = managedTextures[i];\n\n            // Only supports non generated textures at the moment!\n            if (\n                texture.autoGarbageCollect\n                && texture.resource\n                && texture._touched > -1\n                && this.count - texture._touched > this.maxIdle\n            )\n            {\n                texture._touched = -1;\n                texture.unload();\n            }\n        }\n    }\n\n    public destroy(): void\n    {\n        this._renderer = null as any as Renderer;\n    }\n}\n","import { DOMAdapter } from '../../../../environment/adapter';\nimport { ExtensionType } from '../../../../extensions/Extensions';\nimport { Rectangle } from '../../../../maths/shapes/Rectangle';\nimport { deprecation, v8_0_0 } from '../../../../utils/logging/deprecation';\nimport { RenderTarget } from '../renderTarget/RenderTarget';\nimport { getCanvasTexture } from '../texture/utils/getCanvasTexture';\n\nimport type { ICanvas } from '../../../../environment/canvas/ICanvas';\nimport type { TypeOrBool } from '../../../../scene/container/destroyTypes';\nimport type { System } from '../system/System';\nimport type { CanvasSource } from '../texture/sources/CanvasSource';\nimport type { Texture } from '../texture/Texture';\n\n/**\n * Options passed to the ViewSystem\n * @memberof rendering\n * @property {number} [width=800] - The width of the screen.\n * @property {number} [height=600] - The height of the screen.\n * @property {ICanvas} [canvas] - The canvas to use as a view, optional.\n * @property {boolean} [autoDensity=false] - Resizes renderer view in CSS pixels to allow for resolutions other than 1.\n *  This is only supported for HTMLCanvasElement and will be ignored if the canvas is an OffscreenCanvas.\n * @property {number} [resolution] - The resolution / device pixel ratio of the renderer.\n * @property {boolean} [antialias=false] - Whether to enable anti-aliasing. This may affect performance.\n * @property {boolean} [depth] -\n * Whether to ensure the main view has can make use of the depth buffer. Always true for WebGL renderer.\n * @property {boolean} [multiView] - TODO: multiView\n * @property {number} [backgroundAlpha] - The alpha of the background.\n */\nexport interface ViewSystemOptions\n{\n    /**\n     * The width of the screen.\n     * @default 800\n     * @memberof rendering.SharedRendererOptions\n     */\n    width?: number;\n    /**\n     * The height of the screen.\n     * @default 600\n     * @memberof rendering.SharedRendererOptions\n     */\n    height?: number;\n    /**\n     * The canvas to use as a view, optional.\n     * @memberof rendering.SharedRendererOptions\n     */\n    canvas?: ICanvas;\n    /** @deprecated */\n    view?: ICanvas;\n    /**\n     * Resizes renderer view in CSS pixels to allow for resolutions other than 1.\n     *\n     * This is only supported for HTMLCanvasElement\n     * and will be ignored if the canvas is an OffscreenCanvas.\n     * @memberof rendering.SharedRendererOptions\n     */\n    autoDensity?: boolean;\n    /**\n     * The resolution / device pixel ratio of the renderer.\n     * @memberof rendering.SharedRendererOptions\n     */\n    resolution?: number;\n    /**\n     * Whether to enable anti-aliasing. This may affect performance.\n     * @memberof rendering.SharedRendererOptions\n     */\n    antialias?: boolean;\n    /**\n     * Whether to ensure the main view has can make use of the depth buffer. Always true for WebGL renderer.\n     * @memberof rendering.SharedRendererOptions\n     */\n    depth?: boolean;\n\n    /**\n     * Transparency of the background color, value from `0` (fully transparent) to `1` (fully opaque).\n     * @default 1\n     */\n    backgroundAlpha?: number;\n}\n\nexport interface ViewSystemDestroyOptions\n{\n    /** Whether to remove the view element from the DOM. Defaults to `false`. */\n    removeView?: boolean;\n}\n\n/**\n * The view system manages the main canvas that is attached to the DOM.\n * This main role is to deal with how the holding the view reference and dealing with how it is resized.\n * @memberof rendering\n */\nexport class ViewSystem implements System<ViewSystemOptions, TypeOrBool<ViewSystemDestroyOptions>>\n{\n    /** @ignore */\n    public static extension = {\n        type: [\n            ExtensionType.WebGLSystem,\n            ExtensionType.WebGPUSystem,\n            ExtensionType.CanvasSystem,\n        ],\n        name: 'view',\n        priority: 0,\n    } as const;\n\n    /** The default options for the view system. */\n    public static defaultOptions: ViewSystemOptions = {\n        /**\n         * {@link WebGLOptions.width}\n         * @default 800\n         */\n        width: 800,\n        /**\n         * {@link WebGLOptions.height}\n         * @default 600\n         */\n        height: 600,\n        /**\n         * {@link WebGLOptions.autoDensity}\n         * @default false\n         */\n        autoDensity: false,\n        /**\n         * {@link WebGLOptions.antialias}\n         * @default false\n         */\n        antialias: false,\n    };\n\n    /** The canvas element that everything is drawn to. */\n    public canvas!: ICanvas;\n\n    /** The texture that is used to draw the canvas to the screen. */\n    public texture: Texture<CanvasSource>;\n\n    /**\n     * Whether CSS dimensions of canvas view should be resized to screen dimensions automatically.\n     * This is only supported for HTMLCanvasElement and will be ignored if the canvas is an OffscreenCanvas.\n     * @member {boolean}\n     */\n    public get autoDensity(): boolean\n    {\n        return this.texture.source.autoDensity;\n    }\n    public set autoDensity(value: boolean)\n    {\n        this.texture.source.autoDensity = value;\n    }\n\n    /** Whether to enable anti-aliasing. This may affect performance. */\n    public antialias: boolean;\n\n    /**\n     * Measurements of the screen. (0, 0, screenWidth, screenHeight).\n     *\n     * Its safe to use as filterArea or hitArea for the whole stage.\n     */\n    public screen: Rectangle;\n    /** The render target that the view is drawn to. */\n    public renderTarget: RenderTarget;\n\n    /** The resolution / device pixel ratio of the renderer. */\n    get resolution(): number\n    {\n        return this.texture.source._resolution;\n    }\n\n    set resolution(value: number)\n    {\n        this.texture.source.resize(\n            this.texture.source.width,\n            this.texture.source.height,\n            value\n        );\n    }\n\n    /**\n     * initiates the view system\n     * @param options - the options for the view\n     */\n    public init(options: ViewSystemOptions): void\n    {\n        options = {\n            ...ViewSystem.defaultOptions,\n            ...options,\n        };\n\n        if (options.view)\n        {\n            // #if _DEBUG\n            deprecation(v8_0_0, 'ViewSystem.view has been renamed to ViewSystem.canvas');\n            // #endif\n\n            options.canvas = options.view;\n        }\n\n        this.screen = new Rectangle(0, 0, options.width, options.height);\n        this.canvas = options.canvas || DOMAdapter.get().createCanvas();\n        this.antialias = !!options.antialias;\n        this.texture = getCanvasTexture(this.canvas, options);\n        this.renderTarget = new RenderTarget({\n            colorTextures: [this.texture],\n            depth: !!options.depth,\n            isRoot: true,\n        });\n\n        this.texture.source.transparent = options.backgroundAlpha < 1;\n        this.resolution = options.resolution;\n    }\n\n    /**\n     * Resizes the screen and canvas to the specified dimensions.\n     * @param desiredScreenWidth - The new width of the screen.\n     * @param desiredScreenHeight - The new height of the screen.\n     * @param resolution\n     */\n    public resize(desiredScreenWidth: number, desiredScreenHeight: number, resolution: number): void\n    {\n        this.texture.source.resize(desiredScreenWidth, desiredScreenHeight, resolution);\n\n        this.screen.width = this.texture.frame.width;\n        this.screen.height = this.texture.frame.height;\n    }\n\n    /**\n     * Destroys this System and optionally removes the canvas from the dom.\n     * @param {options | false} options - The options for destroying the view, or \"false\".\n     * @param options.removeView - Whether to remove the view element from the DOM. Defaults to `false`.\n     */\n    public destroy(options: TypeOrBool<ViewSystemDestroyOptions> = false): void\n    {\n        const removeView = typeof options === 'boolean' ? options : !!options?.removeView;\n\n        if (removeView && this.canvas.parentNode)\n        {\n            this.canvas.parentNode.removeChild(this.canvas);\n        }\n\n        // note: don't nullify the element\n        //       other systems may need to unbind from it during the destroy iteration (eg. GLContextSystem)\n    }\n}\n","import { CustomRenderPipe } from '../../../../scene/container/CustomRenderPipe';\nimport { RenderGroupPipe } from '../../../../scene/container/RenderGroupPipe';\nimport { RenderGroupSystem } from '../../../../scene/container/RenderGroupSystem';\nimport { SpritePipe } from '../../../../scene/sprite/SpritePipe';\nimport { RendererInitHook } from '../../../../utils/global/globalHooks';\nimport { BatcherPipe } from '../../../batcher/shared/BatcherPipe';\nimport { AlphaMaskPipe } from '../../../mask/alpha/AlphaMaskPipe';\nimport { ColorMaskPipe } from '../../../mask/color/ColorMaskPipe';\nimport { StencilMaskPipe } from '../../../mask/stencil/StencilMaskPipe';\nimport { BackgroundSystem } from '../background/BackgroundSystem';\nimport { BlendModePipe } from '../blendModes/BlendModePipe';\nimport { ExtractSystem } from '../extract/ExtractSystem';\nimport { GenerateTextureSystem } from '../extract/GenerateTextureSystem';\nimport { GlobalUniformSystem } from '../renderTarget/GlobalUniformSystem';\nimport { SchedulerSystem } from '../SchedulerSystem';\nimport { HelloSystem } from '../startup/HelloSystem';\nimport { RenderableGCSystem } from '../texture/RenderableGCSystem';\nimport { TextureGCSystem } from '../texture/TextureGCSystem';\nimport { ViewSystem } from '../view/ViewSystem';\n\nimport type { ExtractRendererOptions } from './utils/typeUtils';\n\nexport const SharedSystems = [\n    BackgroundSystem,\n    GlobalUniformSystem,\n    HelloSystem,\n    ViewSystem,\n    RenderGroupSystem,\n    TextureGCSystem,\n    GenerateTextureSystem,\n    ExtractSystem,\n    RendererInitHook,\n    RenderableGCSystem,\n    SchedulerSystem,\n];\n\nexport const SharedRenderPipes = [\n    BlendModePipe,\n    BatcherPipe,\n    SpritePipe,\n    RenderGroupPipe,\n    AlphaMaskPipe,\n    StencilMaskPipe,\n    ColorMaskPipe,\n    CustomRenderPipe\n];\n\n/**\n * Options for the shared systems of a renderer.\n * @memberof rendering\n */\nexport interface SharedRendererOptions extends ExtractRendererOptions<typeof SharedSystems>, PixiMixins.RendererOptions\n{\n    /**\n     * Whether to stop PixiJS from dynamically importing default extensions for the renderer.\n     * It is false by default, and means PixiJS will load all the default extensions, based\n     * on the environment e.g browser/webworker.\n     * If you set this to true, then you will need to manually import the systems and extensions you need.\n     *\n     * e.g.\n     * ```js\n     * import 'accessibility';\n     * import 'app';\n     * import 'events';\n     * import 'spritesheet';\n     * import 'graphics';\n     * import 'mesh';\n     * import 'text';\n     * import 'text-bitmap';\n     * import 'text-html';\n     * import { autoDetectRenderer } from 'pixi.js';\n     *\n     * const renderer = await autoDetectRenderer({\n     *   width: 800,\n     *   height: 600,\n     *   skipExtensionImports: true,\n     * });\n     * ```\n     * @default false\n     */\n    skipExtensionImports?: boolean;\n    /**\n     * @default true\n     * @deprecated since 8.1.6\n     * @see `skipExtensionImports`\n     */\n    manageImports?: boolean;\n}\n","import { Matrix } from '../../../../maths/matrix/Matrix';\nimport { Rectangle } from '../../../../maths/shapes/Rectangle';\nimport { CLEAR } from '../../gl/const';\nimport { calculateProjection } from '../../gpu/renderTarget/calculateProjection';\nimport { SystemRunner } from '../system/SystemRunner';\nimport { CanvasSource } from '../texture/sources/CanvasSource';\nimport { TextureSource } from '../texture/sources/TextureSource';\nimport { Texture } from '../texture/Texture';\nimport { getCanvasTexture } from '../texture/utils/getCanvasTexture';\nimport { isRenderingToScreen } from './isRenderingToScreen';\nimport { RenderTarget } from './RenderTarget';\n\nimport type { RgbaArray } from '../../../../color/Color';\nimport type { ICanvas } from '../../../../environment/canvas/ICanvas';\nimport type { CLEAR_OR_BOOL } from '../../gl/const';\nimport type { GlRenderTarget } from '../../gl/GlRenderTarget';\nimport type { GpuRenderTarget } from '../../gpu/renderTarget/GpuRenderTarget';\nimport type { Renderer } from '../../types';\nimport type { System } from '../system/System';\nimport type { BindableTexture } from '../texture/Texture';\n\n/**\n * A render surface is a texture, canvas, or render target\n * @memberof rendering\n * @see environment.ICanvas\n * @see rendering.Texture\n * @see rendering.RenderTarget\n */\nexport type RenderSurface = ICanvas | BindableTexture | RenderTarget;\n\n/**\n * stores a render target and its frame\n * @ignore\n */\ninterface RenderTargetAndFrame\n{\n    /** the render target */\n    renderTarget: RenderTarget;\n    /** the frame to use when using the render target */\n    frame: Rectangle\n}\n\n/**\n * An adaptor interface for RenderTargetSystem to support WebGL and WebGPU.\n * This is used internally by the renderer, and is not intended to be used directly.\n * @ignore\n */\nexport interface RenderTargetAdaptor<RENDER_TARGET extends GlRenderTarget | GpuRenderTarget>\n{\n    init(\n        /** the renderer */\n        renderer: Renderer,\n        /** the render target system */\n        renderTargetSystem: RenderTargetSystem<RENDER_TARGET>\n    ): void\n\n    /** A function copies the contents of a render surface to a texture */\n    copyToTexture(\n        /** the render surface to copy from  */\n        sourceRenderSurfaceTexture: RenderTarget,\n        /** the texture to copy to */\n        destinationTexture: Texture,\n        /** the origin of the copy */\n        originSrc: { x: number; y: number },\n        /** the size of the copy */\n        size: { width: number; height: number },\n        /** the destination origin (top left to paste from!) */\n        originDest?: { x: number; y: number },\n    ): Texture\n\n    /** starts a render pass on the render target */\n    startRenderPass(\n        /** the render target to start the render pass on */\n        renderTarget: RenderTarget,\n        /* the clear mode to use. Can be true or a CLEAR number 'COLOR | DEPTH | STENCIL' 0b111* */\n        clear: CLEAR_OR_BOOL,\n        /** the color to clear to */\n        clearColor?: RgbaArray,\n        /** the viewport to use */\n        viewport?: Rectangle\n    ): void\n\n    /** clears the current render target to the specified color */\n    clear(\n        /** the render target to clear */\n        renderTarget: RenderTarget,\n        /** the clear mode to use. Can be true or a CLEAR number 'COLOR | DEPTH | STENCIL' 0b111 */\n        clear: CLEAR_OR_BOOL,\n        /** the color to clear to   */\n        clearColor?: RgbaArray,\n        /** the viewport to use */\n        viewport?: Rectangle\n    ): void\n\n    /** finishes the current render pass */\n    finishRenderPass(renderTarget: RenderTarget): void\n\n    /** called after the render pass is finished */\n    postrender?(renderTarget: RenderTarget): void;\n\n    /** called before the render main pass is started */\n    prerender?(renderTarget: RenderTarget): void;\n\n    /**\n     * initializes a gpu render target. Both renderers use this function to initialize a gpu render target\n     * Its different type of object depending on the renderer.\n     */\n    initGpuRenderTarget(\n        /** the render target to initialize */\n        renderTarget: RenderTarget\n    ): RENDER_TARGET\n\n    /** called when a render target is resized */\n    resizeGpuRenderTarget(\n        /** the render target to resize */\n        renderTarget: RenderTarget\n    ): void\n\n    /** destroys the gpu render target */\n    destroyGpuRenderTarget(\n        /** the render target to destroy */\n        gpuRenderTarget: RENDER_TARGET\n    ): void\n}\n\n/**\n * A system that manages render targets. A render target is essentially a place where the shaders can color in the pixels.\n * The render target system is responsible for binding the render target to the renderer, and managing the viewport.\n * Render targets can be pushed and popped.\n *\n * To make it easier, you can also bind textures and canvases too. This will automatically create a render target for you.\n * The render target itself is a lot more powerful than just a texture or canvas,\n * as it can have multiple textures attached to it.\n * It will also give ou fine grain control over the stencil buffer / depth texture.\n * @example\n *\n * ```js\n *\n * // create a render target\n * const renderTarget = new RenderTarget({\n *   colorTextures: [new TextureSource({ width: 100, height: 100 })],\n * });\n *\n * // bind the render target\n * renderer.renderTarget.bind(renderTarget);\n *\n * // draw something!\n * ```\n * @memberof rendering\n */\nexport class RenderTargetSystem<RENDER_TARGET extends GlRenderTarget | GpuRenderTarget> implements System\n{\n    /** When rendering of a scene begins, this is where the root render surface is stored */\n    public rootRenderTarget: RenderTarget;\n    /** This is the root viewport for the render pass*/\n    public rootViewPort = new Rectangle();\n    /** A boolean that lets the dev know if the current render pass is rendering to the screen. Used by some plugins */\n    public renderingToScreen: boolean;\n    /** the current active render target */\n    public renderTarget: RenderTarget;\n    /** the current active render surface that the render target is created from */\n    public renderSurface: RenderSurface;\n    /** the current viewport that the gpu is using */\n    public readonly viewport = new Rectangle();\n    /**\n     * a runner that lets systems know if the active render target has changed.\n     * Eg the Stencil System needs to know so it can manage the stencil buffer\n     */\n    public readonly onRenderTargetChange = new SystemRunner('onRenderTargetChange');\n    /** the projection matrix that is used by the shaders based on the active render target and the viewport */\n    public readonly projectionMatrix = new Matrix();\n    /** the default clear color for render targets */\n    public readonly defaultClearColor: RgbaArray = [0, 0, 0, 0];\n    /** a reference to the adaptor that interfaces with WebGL / WebGP */\n    public readonly adaptor: RenderTargetAdaptor<RENDER_TARGET>;\n    /**\n     * a hash that stores the render target for a given render surface. When you pass in a texture source,\n     * a render target is created for it. This map stores and makes it easy to retrieve the render target\n     */\n    private readonly _renderSurfaceToRenderTargetHash: Map<RenderSurface, RenderTarget>\n        = new Map();\n    /** A hash that stores a gpu render target for a given render target. */\n    private _gpuRenderTargetHash: Record<number, RENDER_TARGET> = Object.create(null);\n    /**\n     * A stack that stores the render target and frame that is currently being rendered to.\n     * When push is called, the current render target is stored in this stack.\n     * When pop is called, the previous render target is restored.\n     */\n    private readonly _renderTargetStack: RenderTargetAndFrame[] = [];\n    /** A reference to the renderer */\n    private readonly _renderer: Renderer;\n\n    constructor(renderer: Renderer)\n    {\n        this._renderer = renderer;\n        renderer.renderableGC.addManagedHash(this, '_gpuRenderTargetHash');\n    }\n\n    /** called when dev wants to finish a render pass */\n    public finishRenderPass()\n    {\n        this.adaptor.finishRenderPass(this.renderTarget);\n    }\n\n    /**\n     * called when the renderer starts to render a scene.\n     * @param options\n     * @param options.target - the render target to render to\n     * @param options.clear - the clear mode to use. Can be true or a CLEAR number 'COLOR | DEPTH | STENCIL' 0b111\n     * @param options.clearColor - the color to clear to\n     * @param options.frame - the frame to render to\n     */\n    public renderStart({\n        target,\n        clear,\n        clearColor,\n        frame\n    }: {\n        target: RenderSurface;\n        clear: CLEAR_OR_BOOL;\n        clearColor: RgbaArray;\n        frame?: Rectangle\n    }): void\n    {\n        // TODO no need to reset this - use optimised index instead\n        this._renderTargetStack.length = 0;\n\n        this.push(\n            target,\n            clear,\n            clearColor,\n            frame\n        );\n\n        this.rootViewPort.copyFrom(this.viewport);\n        this.rootRenderTarget = this.renderTarget;\n        this.renderingToScreen = isRenderingToScreen(this.rootRenderTarget);\n\n        this.adaptor.prerender?.(this.rootRenderTarget);\n    }\n\n    public postrender()\n    {\n        this.adaptor.postrender?.(this.rootRenderTarget);\n    }\n\n    /**\n     * Binding a render surface! This is the main function of the render target system.\n     * It will take the RenderSurface (which can be a texture, canvas, or render target) and bind it to the renderer.\n     * Once bound all draw calls will be rendered to the render surface.\n     *\n     * If a frame is not provide and the render surface is a texture, the frame of the texture will be used.\n     * @param renderSurface - the render surface to bind\n     * @param clear - the clear mode to use. Can be true or a CLEAR number 'COLOR | DEPTH | STENCIL' 0b111\n     * @param clearColor - the color to clear to\n     * @param frame - the frame to render to\n     * @returns the render target that was bound\n     */\n    public bind(\n        renderSurface: RenderSurface,\n        clear: CLEAR_OR_BOOL = true,\n        clearColor?: RgbaArray,\n        frame?: Rectangle\n    ): RenderTarget\n    {\n        const renderTarget = this.getRenderTarget(renderSurface);\n\n        const didChange = this.renderTarget !== renderTarget;\n\n        this.renderTarget = renderTarget;\n        this.renderSurface = renderSurface;\n\n        const gpuRenderTarget = this.getGpuRenderTarget(renderTarget);\n\n        if (renderTarget.pixelWidth !== gpuRenderTarget.width\n            || renderTarget.pixelHeight !== gpuRenderTarget.height)\n        {\n            this.adaptor.resizeGpuRenderTarget(renderTarget);\n\n            gpuRenderTarget.width = renderTarget.pixelWidth;\n            gpuRenderTarget.height = renderTarget.pixelHeight;\n        }\n\n        const source = renderTarget.colorTexture;\n        const viewport = this.viewport;\n\n        const pixelWidth = source.pixelWidth;\n        const pixelHeight = source.pixelHeight;\n\n        if (!frame && renderSurface instanceof Texture)\n        {\n            frame = renderSurface.frame;\n        }\n\n        if (frame)\n        {\n            const resolution = source._resolution;\n\n            viewport.x = ((frame.x * resolution) + 0.5) | 0;\n            viewport.y = ((frame.y * resolution) + 0.5) | 0;\n            viewport.width = ((frame.width * resolution) + 0.5) | 0;\n            viewport.height = ((frame.height * resolution) + 0.5) | 0;\n        }\n        else\n        {\n            viewport.x = 0;\n            viewport.y = 0;\n            viewport.width = pixelWidth;\n            viewport.height = pixelHeight;\n        }\n\n        calculateProjection(\n            this.projectionMatrix,\n            0, 0,\n            viewport.width / source.resolution,\n            viewport.height / source.resolution,\n            !renderTarget.isRoot\n        );\n\n        this.adaptor.startRenderPass(renderTarget, clear, clearColor, viewport);\n\n        if (didChange)\n        {\n            this.onRenderTargetChange.emit(renderTarget);\n        }\n\n        return renderTarget;\n    }\n\n    public clear(\n        target?: RenderSurface,\n        clear: CLEAR_OR_BOOL = CLEAR.ALL,\n        clearColor?: RgbaArray,\n    )\n    {\n        if (!clear) return;\n\n        if (target)\n        {\n            target = this.getRenderTarget(target);\n        }\n\n        this.adaptor.clear(\n            (target as RenderTarget) || this.renderTarget,\n            clear,\n            clearColor,\n            this.viewport\n        );\n    }\n\n    protected contextChange(): void\n    {\n        this._gpuRenderTargetHash = Object.create(null);\n    }\n\n    /**\n     * Push a render surface to the renderer. This will bind the render surface to the renderer,\n     * @param renderSurface - the render surface to push\n     * @param clear - the clear mode to use. Can be true or a CLEAR number 'COLOR | DEPTH | STENCIL' 0b111\n     * @param clearColor - the color to clear to\n     * @param frame - the frame to use when rendering to the render surface\n     */\n    public push(\n        renderSurface: RenderSurface,\n        clear: CLEAR | boolean = CLEAR.ALL,\n        clearColor?: RgbaArray,\n        frame?: Rectangle\n    )\n    {\n        const renderTarget = this.bind(renderSurface, clear, clearColor, frame);\n\n        this._renderTargetStack.push({\n            renderTarget,\n            frame,\n        });\n\n        return renderTarget;\n    }\n\n    /** Pops the current render target from the renderer and restores the previous render target. */\n    public pop()\n    {\n        this._renderTargetStack.pop();\n\n        const currentRenderTargetData = this._renderTargetStack[this._renderTargetStack.length - 1];\n\n        this.bind(currentRenderTargetData.renderTarget, false, null, currentRenderTargetData.frame);\n    }\n\n    /**\n     * Gets the render target from the provide render surface. Eg if its a texture,\n     * it will return the render target for the texture.\n     * If its a render target, it will return the same render target.\n     * @param renderSurface - the render surface to get the render target for\n     * @returns the render target for the render surface\n     */\n    public getRenderTarget(renderSurface: RenderSurface): RenderTarget\n    {\n        if (((renderSurface as Texture).isTexture))\n        {\n            renderSurface = (renderSurface as Texture).source;\n        }\n\n        return this._renderSurfaceToRenderTargetHash.get(renderSurface)\n        ?? this._initRenderTarget(renderSurface);\n    }\n\n    /**\n     * Copies a render surface to another texture.\n     *\n     * NOTE:\n     * for sourceRenderSurfaceTexture, The render target must be something that is written too by the renderer\n     *\n     * The following is not valid:\n     * @example\n     * const canvas = document.createElement('canvas')\n     * canvas.width = 200;\n     * canvas.height = 200;\n     *\n     * const ctx = canvas2.getContext('2d')!\n     * ctx.fillStyle = 'red'\n     * ctx.fillRect(0, 0, 200, 200);\n     *\n     * const texture = RenderTexture.create({\n     *   width: 200,\n     *   height: 200,\n     * })\n     * const renderTarget = renderer.renderTarget.getRenderTarget(canvas2);\n     *\n     * renderer.renderTarget.copyToTexture(renderTarget,texture, {x:0,y:0},{width:200,height:200},{x:0,y:0});\n     *\n     * The best way to copy a canvas is to create a texture from it. Then render with that.\n     *\n     * Parsing in a RenderTarget canvas context (with a 2d context)\n     * @param sourceRenderSurfaceTexture - the render surface to copy from\n     * @param destinationTexture - the texture to copy to\n     * @param originSrc - the origin of the copy\n     * @param originSrc.x - the x origin of the copy\n     * @param originSrc.y - the y origin of the copy\n     * @param size - the size of the copy\n     * @param size.width - the width of the copy\n     * @param size.height - the height of the copy\n     * @param originDest - the destination origin (top left to paste from!)\n     * @param originDest.x - the x origin of the paste\n     * @param originDest.y - the y origin of the paste\n     */\n    public copyToTexture(\n        sourceRenderSurfaceTexture: RenderTarget,\n        destinationTexture: Texture,\n        originSrc: { x: number; y: number },\n        size: { width: number; height: number },\n        originDest: { x: number; y: number; },\n    )\n    {\n        // fit the size to the source we don't want to go out of bounds\n\n        if (originSrc.x < 0)\n        {\n            size.width += originSrc.x;\n            originDest.x -= originSrc.x;\n            originSrc.x = 0;\n        }\n\n        if (originSrc.y < 0)\n        {\n            size.height += originSrc.y;\n            originDest.y -= originSrc.y;\n            originSrc.y = 0;\n        }\n\n        const { pixelWidth, pixelHeight } = sourceRenderSurfaceTexture;\n\n        size.width = Math.min(size.width, pixelWidth - originSrc.x);\n        size.height = Math.min(size.height, pixelHeight - originSrc.y);\n\n        return this.adaptor.copyToTexture(\n            sourceRenderSurfaceTexture,\n            destinationTexture,\n            originSrc,\n            size,\n            originDest\n        );\n    }\n\n    /**\n     * ensures that we have a depth stencil buffer available to render to\n     * This is used by the mask system to make sure we have a stencil buffer.\n     */\n    public ensureDepthStencil()\n    {\n        if (!this.renderTarget.stencil)\n        {\n            this.renderTarget.stencil = true;\n\n            this.adaptor.startRenderPass(this.renderTarget, false, null, this.viewport);\n        }\n    }\n\n    /** nukes the render target system */\n    public destroy()\n    {\n        (this._renderer as null) = null;\n\n        this._renderSurfaceToRenderTargetHash.forEach((renderTarget, key) =>\n        {\n            if (renderTarget !== key)\n            {\n                renderTarget.destroy();\n            }\n        });\n\n        this._renderSurfaceToRenderTargetHash.clear();\n\n        this._gpuRenderTargetHash = Object.create(null);\n    }\n\n    private _initRenderTarget(renderSurface: RenderSurface): RenderTarget\n    {\n        let renderTarget: RenderTarget = null;\n\n        if (CanvasSource.test(renderSurface))\n        {\n            renderSurface = getCanvasTexture(renderSurface as ICanvas).source;\n        }\n\n        if (renderSurface instanceof RenderTarget)\n        {\n            renderTarget = renderSurface;\n        }\n        else if (renderSurface instanceof TextureSource)\n        {\n            renderTarget = new RenderTarget({\n                colorTextures: [renderSurface],\n            });\n\n            if (CanvasSource.test(renderSurface.source.resource))\n            {\n                renderTarget.isRoot = true;\n            }\n\n            // TODO add a test for this\n            renderSurface.once('destroy', () =>\n            {\n                renderTarget.destroy();\n\n                this._renderSurfaceToRenderTargetHash.delete(renderSurface);\n\n                const gpuRenderTarget = this._gpuRenderTargetHash[renderTarget.uid];\n\n                if (gpuRenderTarget)\n                {\n                    this._gpuRenderTargetHash[renderTarget.uid] = null;\n                    this.adaptor.destroyGpuRenderTarget(gpuRenderTarget);\n                }\n            });\n        }\n\n        this._renderSurfaceToRenderTargetHash.set(renderSurface, renderTarget);\n\n        return renderTarget;\n    }\n\n    public getGpuRenderTarget(renderTarget: RenderTarget)\n    {\n        return this._gpuRenderTargetHash[renderTarget.uid]\n        || (this._gpuRenderTargetHash[renderTarget.uid] = this.adaptor.initGpuRenderTarget(renderTarget));\n    }\n\n    public resetState(): void\n    {\n        this.renderTarget = null;\n        this.renderSurface = null;\n    }\n}\n","import type { RenderTarget } from './RenderTarget';\n\n/**\n * Checks if the render target is viewable on the screen\n * Basically, is it a canvas element and is that canvas element in the DOM\n * @param renderTarget - the render target to check\n * @returns true if the render target is viewable on the screen\n */\nexport function isRenderingToScreen(renderTarget: RenderTarget): boolean\n{\n    const resource = renderTarget.colorTexture.source.resource;\n\n    return ((globalThis.HTMLCanvasElement && resource instanceof HTMLCanvasElement) && document.body.contains(resource));\n}\n","import type { Matrix } from '../../../../maths/matrix/Matrix';\n\nexport function calculateProjection(\n    pm: Matrix,\n    x: number,\n    y: number,\n    width: number,\n    height: number,\n    flipY: boolean\n): Matrix\n{\n    const sign = flipY ? 1 : -1;\n\n    pm.identity();\n\n    pm.a = (1 / width * 2);\n    pm.d = sign * (1 / height * 2);\n\n    pm.tx = -1 - (x * pm.a);\n    pm.ty = -sign - (y * pm.d);\n\n    return pm;\n}\n","import { uniformParsers } from './uniformParsers';\n\nimport type { UboElement, UNIFORM_TYPES_SINGLE, UniformsSyncCallback } from '../types';\n\nexport function createUboSyncFunction(\n    uboElements: UboElement[],\n    parserCode: 'uboWgsl' | 'uboStd40',\n    arrayGenerationFunction: (uboElement: UboElement, offsetToAdd: number) => string,\n    singleSettersMap: Record<UNIFORM_TYPES_SINGLE, string>,\n): UniformsSyncCallback\n{\n    const funcFragments = [`\n        var v = null;\n        var v2 = null;\n        var t = 0;\n        var index = 0;\n        var name = null;\n        var arrayOffset = null;\n    `];\n\n    let prev = 0;\n\n    for (let i = 0; i < uboElements.length; i++)\n    {\n        const uboElement = uboElements[i];\n\n        const name = uboElement.data.name;\n\n        let parsed = false;\n        let offset = 0;\n\n        for (let j = 0; j < uniformParsers.length; j++)\n        {\n            const uniformParser = uniformParsers[j];\n\n            if (uniformParser.test(uboElement.data))\n            {\n                offset = uboElement.offset / 4;\n\n                funcFragments.push(\n                    `name = \"${name}\";`,\n                    `offset += ${offset - prev};`,\n                    uniformParsers[j][parserCode] || uniformParsers[j].ubo);\n                parsed = true;\n\n                break;\n            }\n        }\n\n        if (!parsed)\n        {\n            if (uboElement.data.size > 1)\n            {\n                offset = uboElement.offset / 4;\n\n                funcFragments.push(arrayGenerationFunction(uboElement, offset - prev));\n            }\n            else\n            {\n                const template = singleSettersMap[uboElement.data.type as UNIFORM_TYPES_SINGLE];\n\n                offset = uboElement.offset / 4;\n\n                funcFragments.push(/* wgsl */`\n                    v = uv.${name};\n                    offset += ${offset - prev};\n                    ${template};\n                `);\n            }\n        }\n\n        prev = offset;\n    }\n\n    const fragmentSrc = funcFragments.join('\\n');\n\n    // eslint-disable-next-line no-new-func\n    return new Function(\n        'uv',\n        'data',\n        'dataInt32',\n        'offset',\n        fragmentSrc,\n    ) as UniformsSyncCallback;\n}\n","// Parsers, each one of these will take a look at the type of shader property and uniform.\n// if they pass the test function then the code function is called that returns a the shader upload code for that uniform.\n// Shader upload code is automagically generated with these parsers.\n// If no parser is valid then the default upload functions are used.\n// exposing Parsers means that custom upload logic can be added to pixi's shaders.\n// A good example would be a pixi rectangle can be directly set on a uniform.\n// If the shader sees it it knows how to upload the rectangle structure as a vec4\n// format is as follows:\n//\n// {\n//     test: (data, uniform) => {} <--- test is this code should be used for this uniform\n//     code: (name, uniform) => {} <--- returns the string of the piece of code that uploads the uniform\n//     codeUbo: (name, uniform) => {} <--- returns the string of the piece of code that uploads the\n//                                         uniform to a uniform buffer\n// }\n// import { Texture } from '../../texture/Texture';\n\nimport type { Color } from '../../../../../color/Color';\nimport type { Matrix } from '../../../../../maths/matrix/Matrix';\nimport type { PointLike } from '../../../../../maths/point/PointLike';\nimport type { Rectangle } from '../../../../../maths/shapes/Rectangle';\nimport type { UNIFORM_TYPES, UniformData } from '../types';\n\nexport interface UniformParserDefinition\n{\n    type: UNIFORM_TYPES;\n    test(data: UniformData): boolean;\n    ubo?: string;\n    uboWgsl?: string;\n    uboStd40?: string;\n    uniform?: string;\n}\n\nexport const uniformParsers: UniformParserDefinition[] = [\n    // uploading pixi matrix object to mat3\n    {\n        type: 'mat3x3<f32>',\n        test: (data: UniformData): boolean =>\n        {\n            const value = data.value as Matrix;\n\n            return value.a !== undefined;\n        },\n        ubo: `\n            var matrix = uv[name].toArray(true);\n            data[offset] = matrix[0];\n            data[offset + 1] = matrix[1];\n            data[offset + 2] = matrix[2];\n            data[offset + 4] = matrix[3];\n            data[offset + 5] = matrix[4];\n            data[offset + 6] = matrix[5];\n            data[offset + 8] = matrix[6];\n            data[offset + 9] = matrix[7];\n            data[offset + 10] = matrix[8];\n        `,\n        uniform: `\n            gl.uniformMatrix3fv(ud[name].location, false, uv[name].toArray(true));\n        `\n    },\n    // uploading a pixi rectangle as a vec4\n    {\n        type: 'vec4<f32>',\n        test: (data: UniformData): boolean =>\n            data.type === 'vec4<f32>' && data.size === 1 && (data.value as Rectangle).width !== undefined,\n        ubo: `\n            v = uv[name];\n            data[offset] = v.x;\n            data[offset + 1] = v.y;\n            data[offset + 2] = v.width;\n            data[offset + 3] = v.height;\n        `,\n        uniform: `\n            cv = ud[name].value;\n            v = uv[name];\n            if (cv[0] !== v.x || cv[1] !== v.y || cv[2] !== v.width || cv[3] !== v.height) {\n                cv[0] = v.x;\n                cv[1] = v.y;\n                cv[2] = v.width;\n                cv[3] = v.height;\n                gl.uniform4f(ud[name].location, v.x, v.y, v.width, v.height);\n            }\n        `\n    },\n    // uploading a pixi point as a vec2\n    {\n        type: 'vec2<f32>',\n        test: (data: UniformData): boolean =>\n            data.type === 'vec2<f32>' && data.size === 1 && (data.value as PointLike).x !== undefined,\n        ubo:  `\n            v = uv[name];\n            data[offset] = v.x;\n            data[offset + 1] = v.y;\n        `,\n        uniform: `\n            cv = ud[name].value;\n            v = uv[name];\n            if (cv[0] !== v.x || cv[1] !== v.y) {\n                cv[0] = v.x;\n                cv[1] = v.y;\n                gl.uniform2f(ud[name].location, v.x, v.y);\n            }\n        `\n    },\n    // uploading a pixi color as a vec4\n    {\n        type: 'vec4<f32>',\n        test: (data: UniformData): boolean =>\n            data.type === 'vec4<f32>' && data.size === 1 && (data.value as Color).red !== undefined,\n        ubo: `\n            v = uv[name];\n            data[offset] = v.red;\n            data[offset + 1] = v.green;\n            data[offset + 2] = v.blue;\n            data[offset + 3] = v.alpha;\n        `,\n        uniform: `\n            cv = ud[name].value;\n            v = uv[name];\n            if (cv[0] !== v.red || cv[1] !== v.green || cv[2] !== v.blue || cv[3] !== v.alpha) {\n                cv[0] = v.red;\n                cv[1] = v.green;\n                cv[2] = v.blue;\n                cv[3] = v.alpha;\n                gl.uniform4f(ud[name].location, v.red, v.green, v.blue, v.alpha);\n            }\n        `\n    },\n    // uploading a pixi color as a vec3\n    {\n        type: 'vec3<f32>',\n        test: (data: UniformData): boolean =>\n            data.type === 'vec3<f32>' && data.size === 1 && (data.value as Color).red !== undefined,\n        ubo: `\n            v = uv[name];\n            data[offset] = v.red;\n            data[offset + 1] = v.green;\n            data[offset + 2] = v.blue;\n        `,\n        uniform: `\n            cv = ud[name].value;\n            v = uv[name];\n            if (cv[0] !== v.red || cv[1] !== v.green || cv[2] !== v.blue) {\n                cv[0] = v.red;\n                cv[1] = v.green;\n                cv[2] = v.blue;\n                gl.uniform3f(ud[name].location, v.red, v.green, v.blue);\n            }\n        `\n    },\n];\n","import { unsafeEvalSupported } from '../../../../utils/browser/unsafeEvalSupported';\nimport { Buffer } from '../buffer/Buffer';\nimport { BufferUsage } from '../buffer/const';\n\nimport type { System } from '../system/System';\nimport type { UboElement, UboLayout, UniformData, UniformsSyncCallback } from './types';\nimport type { UniformGroup } from './UniformGroup';\n\nexport interface UboAdaptor\n{\n    createUboElements: (uniformData: UniformData[]) => UboLayout;\n    generateUboSync: (uboElements: UboElement[]) => UniformsSyncCallback;\n}\n\n/**\n * System plugin to the renderer to manage uniform buffers.\n * @memberof rendering\n */\nexport class UboSystem implements System\n{\n    /** Cache of uniform buffer layouts and sync functions, so we don't have to re-create them */\n    private _syncFunctionHash: Record<string, {\n        layout: UboLayout,\n        syncFunction: (uniforms: Record<string, any>, data: Float32Array, dataInt32: Int32Array, offset: number) => void\n    }> = Object.create(null);\n\n    private readonly _adaptor: UboAdaptor;\n\n    constructor(adaptor: UboAdaptor)\n    {\n        this._adaptor = adaptor;\n\n        // Validation check that this environment support `new Function`\n        this._systemCheck();\n    }\n\n    /**\n     * Overridable function by `pixi.js/unsafe-eval` to silence\n     * throwing an error if platform doesn't support unsafe-evals.\n     * @private\n     */\n    private _systemCheck(): void\n    {\n        if (!unsafeEvalSupported())\n        {\n            throw new Error('Current environment does not allow unsafe-eval, '\n                 + 'please use pixi.js/unsafe-eval module to enable support.');\n        }\n    }\n\n    public ensureUniformGroup(uniformGroup: UniformGroup): void\n    {\n        const uniformData = this.getUniformGroupData(uniformGroup);\n\n        uniformGroup.buffer ||= new Buffer({\n            data: new Float32Array(uniformData.layout.size / 4),\n            usage: BufferUsage.UNIFORM | BufferUsage.COPY_DST,\n        });\n    }\n\n    public getUniformGroupData(uniformGroup: UniformGroup)\n    {\n        return this._syncFunctionHash[uniformGroup._signature] || this._initUniformGroup(uniformGroup);\n    }\n\n    private _initUniformGroup(uniformGroup: UniformGroup)\n    {\n        const uniformGroupSignature = uniformGroup._signature;\n\n        let uniformData = this._syncFunctionHash[uniformGroupSignature];\n\n        if (!uniformData)\n        {\n            const elements = Object.keys(uniformGroup.uniformStructures).map((i) => uniformGroup.uniformStructures[i]);\n\n            const layout = this._adaptor.createUboElements(elements);\n\n            const syncFunction = this._generateUboSync(layout.uboElements);\n\n            uniformData = this._syncFunctionHash[uniformGroupSignature] = {\n                layout,\n                syncFunction\n            };\n        }\n\n        return this._syncFunctionHash[uniformGroupSignature];\n    }\n\n    private _generateUboSync(\n        uboElements: UboElement[],\n    ): UniformsSyncCallback\n    {\n        return this._adaptor.generateUboSync(uboElements);\n    }\n\n    public syncUniformGroup(uniformGroup: UniformGroup, data?: Float32Array, offset?: number): boolean\n    {\n        const uniformGroupData = this.getUniformGroupData(uniformGroup);\n\n        uniformGroup.buffer ||= new Buffer({\n            data: new Float32Array(uniformGroupData.layout.size / 4),\n            usage: BufferUsage.UNIFORM | BufferUsage.COPY_DST,\n        });\n\n        let dataInt32: Int32Array = null;\n\n        if (!data)\n        {\n            data = uniformGroup.buffer.data as Float32Array;\n            dataInt32 = uniformGroup.buffer.dataInt32;\n        }\n        offset ||= 0;\n\n        uniformGroupData.syncFunction(uniformGroup.uniforms, data, dataInt32, offset);\n\n        return true;\n    }\n\n    public updateUniformGroup(uniformGroup: UniformGroup): boolean\n    {\n        if (uniformGroup.isStatic && !uniformGroup._dirtyId) return false;\n        uniformGroup._dirtyId = 0;\n\n        const synced = this.syncUniformGroup(uniformGroup);\n\n        uniformGroup.buffer.update();\n\n        return synced;\n    }\n\n    public destroy(): void\n    {\n        this._syncFunctionHash = null;\n    }\n}\n","export function colorToUniform(rgb: number, alpha: number, out: Float32Array, offset: number)\n{\n    // TODO replace with Color..\n    out[offset++] = ((rgb >> 16) & 0xFF) / 255;\n    out[offset++] = ((rgb >> 8) & 0xFF) / 255;\n    out[offset++] = (rgb & 0xFF) / 255;\n    out[offset++] = alpha;\n}\n\nexport function color32BitToUniform(abgr: number, out: Float32Array, offset: number)\n{\n    const alpha = ((abgr >> 24) & 0xFF) / 255;\n\n    out[offset++] = ((abgr & 0xFF) / 255) * alpha;\n    out[offset++] = (((abgr >> 8) & 0xFF) / 255) * alpha;\n    out[offset++] = (((abgr >> 16) & 0xFF) / 255) * alpha;\n    out[offset++] = alpha;\n}\n","import EventEmitter from 'eventemitter3';\nimport { uid } from '../../../../utils/data/uid';\n\nimport type { BindResource } from '../../gpu/shader/BindResource';\nimport type { Buffer } from './Buffer';\n\n/**\n * A resource that can be bound to a bind group and used in a shader.\n * Whilst a buffer can be used as a resource, this class allows you to specify an offset and size of the buffer to use.\n * This is useful if you have a large buffer and only part of it is used in a shader.\n *\n * This resource, will listen for changes on the underlying buffer and emit a itself if the buffer changes shape.\n * @example\n *\n * const buffer = new Buffer({\n *     data: new Float32Array(1000),\n *    usage: BufferUsage.UNIFORM,\n * });\n * // Create a buffer resource that uses the first 100 bytes of a buffer\n * const bufferResource = new BufferResource({\n *    buffer,\n *    offset: 0,\n *    size: 100,\n * });\n * @memberof rendering\n */\nexport class BufferResource extends EventEmitter<{\n    change: BindResource,\n}> implements BindResource\n{\n    /**\n     * emits when the underlying buffer has changed shape (i.e. resized)\n     * letting the renderer know that it needs to discard the old buffer on the GPU and create a new one\n     * @event change\n     */\n\n    /** a unique id for this uniform group used through the renderer */\n    public readonly uid: number = uid('buffer');\n\n    /**\n     * a resource type, used to identify how to handle it when its in a bind group / shader resource\n     * @internal\n     * @ignore\n     */\n    public readonly _resourceType = 'bufferResource';\n\n    /**\n     * used internally to know if a uniform group was used in the last render pass\n     * @internal\n     * @ignore\n     */\n    public _touched = 0;\n\n    /**\n     * the resource id used internally by the renderer to build bind group keys\n     * @internal\n     * @ignore\n     */\n    public _resourceId = uid('resource');\n\n    /** the underlying buffer that this resource is using */\n    public buffer: Buffer;\n    /** the offset of the buffer this resource is using. If not provided, then it will use the offset of the buffer. */\n    public readonly offset: number;\n    /** the size of the buffer this resource is using. If not provided, then it will use the size of the buffer. */\n    public readonly size: number;\n    /**\n     * A cheeky hint to the GL renderer to let it know this is a BufferResource\n     * @internal\n     * @ignore\n     */\n    public readonly _bufferResource = true;\n\n    /**\n     * Has the Buffer resource been destroyed?\n     * @readonly\n     */\n    public destroyed = false;\n\n    /**\n     * Create a new Buffer Resource.\n     * @param options - The options for the buffer resource\n     * @param options.buffer - The underlying buffer that this resource is using\n     * @param options.offset - The offset of the buffer this resource is using.\n     * If not provided, then it will use the offset of the buffer.\n     * @param options.size - The size of the buffer this resource is using.\n     * If not provided, then it will use the size of the buffer.\n     */\n    constructor({ buffer, offset, size }: { buffer: Buffer; offset?: number; size?: number; })\n    {\n        super();\n\n        this.buffer = buffer;\n        this.offset = offset | 0;\n        this.size = size;\n\n        this.buffer.on('change', this.onBufferChange, this);\n    }\n\n    protected onBufferChange(): void\n    {\n        this._resourceId = uid('resource');\n\n        this.emit('change', this);\n    }\n\n    /**\n     * Destroys this resource. Make sure the underlying buffer is not used anywhere else\n     * if you want to destroy it as well, or code will explode\n     * @param destroyBuffer - Should the underlying buffer be destroyed as well?\n     */\n    public destroy(destroyBuffer = false): void\n    {\n        this.destroyed = true;\n\n        if (destroyBuffer)\n        {\n            this.buffer.destroy();\n        }\n\n        this.emit('change', this);\n\n        this.buffer = null;\n    }\n}\n"],"names":["_RenderTarget","constructor","descriptor","arguments","length","undefined","uid","colorTextures","dirtyId","isRoot","_size","Float32Array","_managedColorTextures","defaultOptions","this","stencil","depth","i","push","TextureSource","width","height","resolution","antialias","map","texture","source","colorSource","colorTexture","resize","_resolution","on","onSourceResize","depthStencilTexture","Texture","ensureDepthStencilTexture","size","pixelWidth","pixelHeight","format","autoGenerateMipmaps","mipLevelCount","skipColorTexture","forEach","destroy","off","RenderTarget","localUniformBit","name","vertex","header","main","end","localUniformBitGroup2","replace","localUniformBitGl","blendModeIds","normal","add","multiply","screen","overlay","erase","min","max","_State","data","blendMode","polygonOffset","blend","depthMask","value","offsets","cullMode","culling","clockwiseFrontFace","depthTest","_blendMode","_blendModeId","_polygonOffset","toString","for2d","state","default2d","State","BatchableSprite","batcherName","topology","attributeSize","indexSize","packAsQuad","roundPixels","_attributeStart","_batcher","_batch","renderable","groupBlendMode","color","groupColorAlpha","reset","bounds","textureBit","fragment","textureBitGl","ensureAttributes","geometry","extractedData","attributes","attribute","attributeData","offset","instance","warn","buffers","tempStride","tempStart","j","buffer","getAttributeInfoFromFormat","stride","start","ensureStartAndStride","canvasCache","Map","getCanvasTexture","canvas","options","has","CanvasSource","resource","onDestroy","get","delete","once","set","loopMatrix","col","row","uboSyncFunctionsSTD40","f32","i32","uboSyncFunctionsWGSL","GpuStencilModesToPixi","STENCIL_MODES","NONE","DISABLED","stencilWriteMask","stencilReadMask","RENDERING_MASK_ADD","stencilFront","compare","passOp","stencilBack","RENDERING_MASK_REMOVE","MASK_ACTIVE","INVERSE_MASK_ACTIVE","CustomRenderPipe","renderer","_renderer","updateRenderable","destroyRenderable","validateRenderable","addRenderable","container","instructionSet","renderPipes","batch","break","execute","isRenderable","render","extension","type","ExtensionType","WebGLPipes","WebGPUPipes","CanvasPipes","executeInstructions","renderGroup","instructions","instructionSize","instruction","renderPipeId","tempMatrix","Matrix","RenderGroupPipe","addRenderGroup","isCachedAsTexture","_addRenderableCacheAsTexture","_addRenderableDirect","_executeCacheAsTexture","_executeDirect","_batchableRenderGroup","BigPool","return","batchableRenderGroup","root","transform","relativeGroupTransform","_textureBounds","addToBatch","textureNeedsUpdate","worldTransformMatrix","identity","translate","x","y","renderTarget","frame","globalUniforms","worldColor","finishRenderPass","pop","updateElement","update","inverseParentTextureTransform","worldColorAlpha","clearList","list","index","tempContainer","Container","UPDATE_BLEND_COLOR_VISIBLE","UPDATE_VISIBLE","UPDATE_COLOR","UPDATE_BLEND","updateRenderGroupTransforms","updateChildRenderGroups","worldAlpha","renderGroupParent","worldTransform","appendFrom","multiplyColors","groupColor","groupAlpha","copyFrom","localTransform","localColor","localAlpha","updateRenderGroupTransform","childrenToUpdate","updateTick","renderGroupDepth","Number","childrenAtDepth","child","parentRenderGroup","relativeRenderGroupDepth","updateTransformAndChildren","renderGroupChildren","updateFlags","didChange","updateLocalTransform","parent","_updateFlags","updateColorBlendVisibility","children","structureDidChange","localBlendMode","globalDisplayStatus","localDisplayStatus","RenderGroupSystem","_ref","originalLocalTransform","_updateCachedRenderGroups","_updateRenderGroups","uniformBatch","renderEnd","closestCacheAsTexture","updateCacheTexture","_parentCacheAsTextureRenderGroup","invalidateMatrices","getLocalBounds","ceil","lastTexture","TexturePool","returnTexture","textureOptions","view","getOptimalTexture","Bounds","runOnRender","childrenRenderablesToUpdate","rebuildRequired","validateRenderables","_buildInstructions","_updateRenderables","upload","didViewUpdate","rendererOrPipes","buildStart","colorMask","sortableChildren","sortChildren","collectRenderablesWithEffects","buildEnd","WebGLSystem","WebGPUSystem","CanvasSystem","SpritePipe","_gpuSpriteHash","Object","create","_destroyRenderableBound","bind","renderableGC","addManagedHash","sprite","gpuSprite","_getGpuSprite","_updateBatchableSprite","checkAndUpdateTexture","_texture","batchableSprite","visualBounds","_initGPUSprite","groupTransform","_roundPixels","_BatcherPipe","adaptor","_batchersByInstructionSet","_activeBatches","_adaptor","init","getBatcher","_availableBatchers","batchers","default","DefaultBatcher","_activeBatch","begin","batchableObject","batches","indexBuffer","setDataWithSize","attributeBuffer","float32View","batcher","dirty","action","shader","BatcherPipe","extensions","handleByMap","Batcher","_Filter","Shader","super","enabled","_state","padding","blendRequired","clipToViewport","addResource","apply","filterManager","input","output","clearMode","applyFilter","from","gpu","gl","rest","gpuProgram","glProgram","GpuProgram","GlProgram","Filter","MaskFilter","textureMatrix","TextureMatrix","filterUniforms","UniformGroup","uFilterMatrix","uMaskClamp","uClampFrame","uAlpha","uInverse","inverse","entryPoint","resources","uMaskTexture","_textureMatrix","uniforms","calculateSpriteMatrix","prepend","mapCoord","tempBounds","AlphaMaskEffect","FilterEffect","filters","Sprite","EMPTY","AlphaMaskPipe","_activeMaskStage","mask","maskedContainer","_maskOptions","canBundle","renderMaskToTexture","maskContainer","includeInBuild","collectRenderables","_maskedContainer","renderMask","filterEffect","measurable","getGlobalBounds","colorTextureSource","filterTexture","tx","minX","ty","minY","maskData","RendererType","WEBGL","filter","ColorMaskPipe","_colorStack","_colorStackIndex","_currentColor","_container","colorStack","currentColor","_mask","setMask","StencilMaskPipe","_maskStackHash","_maskHash","WeakMap","_a","effect","setBlendMode","instructionsStart","instructionsLength","renderTargetUid","maskStackIndex","ensureDepthStencil","setStencilMode","clear","CLEAR","STENCIL","_BackgroundSystem","clearBeforeRender","_backgroundColor","Color","alpha","background","backgroundColor","backgroundAlpha","setAlpha","setValue","colorRgba","toArray","priority","BackgroundSystem","BLEND_MODE_FILTERS","handle","BlendMode","Error","ref","BlendModePipe","_isAdvanced","_filterHash","runners","prerender","_activeBlendMode","_endAdvancedBlendMode","_beginAdvancedBlendMode","_renderableList","renderables","imageTypes","png","jpg","webp","_ExtractSystem","_normalizeOptions","defaults","target","image","Image","src","base64","defaultImageOptions","quality","toBlob","Promise","resolve","reject","blob","reader","FileReader","onload","result","onerror","readAsDataURL","toDataURL","convertToBlob","generateCanvas","textureGenerator","generateTexture","pixels","pixelInfo","getPixels","download","link","document","createElement","filename","href","body","appendChild","click","removeChild","log","console","style","join","ExtractSystem","RenderTexture","tempRect","Rectangle","noColor","GenerateTextureSystem","textureSourceOptions","clearColor","Array","isArray","shared","region","copyTo","rectangle","Math","updateMipmaps","GlobalUniformSystem","_stackIndex","_globalUniformDataStack","_uniformsPool","_activeUniforms","_bindGroupPool","_activeBindGroups","projectionMatrix","currentGlobalUniformData","projectionData","Point","globalUniformData","bindGroup","uniformGroup","_createUniforms","uProjectionMatrix","uResolution","uWorldTransformMatrix","color32BitToUniform","uWorldColorAlpha","getUniformBindGroup","BindGroup","setResource","_currentGlobalUniformData","isStatic","SchedulerSystem","_tasks","_offset","Ticker","system","_update","repeat","func","duration","id","performance","now","last","cancel","splice","task","elapsed","remove","saidHello","HelloSystem","hello","context","webGLVersion","DOMAdapter","getNavigator","userAgent","toLowerCase","indexOf","args","VERSION","globalThis","sayHello","cleanHash","hash","clean","cleanHash2","cleanArray","arr","renderableGCTick","_RenderableGCSystem","_managedRenderables","_managedHashes","_managedArrays","maxUnusedTime","renderableGCMaxUnusedTime","_frequency","renderableGCFrequency","renderableGCActive","_handler","scheduler","run","_hashHandler","_arrayHandler","array","addManagedArray","_now","gcTick","_updateInstructionGCTick","_lastUsed","_removeRenderable","managedRenderables","currentTick","destroyed","rp","RenderableGCSystem","_TextureGCSystem","count","checkCount","checkCountMax","textureGCCheckCountMax","maxIdle","textureGCAMaxIdle","textureGCMaxIdle","active","textureGCActive","postrender","renderingToScreen","managedTextures","autoGarbageCollect","_touched","unload","TextureGCSystem","_ViewSystem","autoDensity","deprecation","v8_0_0","createCanvas","transparent","desiredScreenWidth","desiredScreenHeight","removeView","parentNode","SharedSystems","RendererInitHook","SharedRenderPipes","RenderTargetSystem","rootViewPort","viewport","onRenderTargetChange","SystemRunner","defaultClearColor","_renderSurfaceToRenderTargetHash","_gpuRenderTargetHash","_renderTargetStack","renderStart","rootRenderTarget","HTMLCanvasElement","contains","isRenderingToScreen","renderSurface","getRenderTarget","gpuRenderTarget","getGpuRenderTarget","resizeGpuRenderTarget","pm","flipY","sign","a","d","calculateProjection","startRenderPass","emit","ALL","contextChange","currentRenderTargetData","isTexture","_initRenderTarget","copyToTexture","sourceRenderSurfaceTexture","destinationTexture","originSrc","originDest","key","test","destroyGpuRenderTarget","initGpuRenderTarget","resetState","createUboSyncFunction","uboElements","parserCode","arrayGenerationFunction","singleSettersMap","funcFragments","prev","uboElement","parsed","uniformParsers","ubo","template","fragmentSrc","Function","uniform","red","UboSystem","_syncFunctionHash","_systemCheck","unsafeEvalSupported","ensureUniformGroup","uniformData","getUniformGroupData","Buffer","layout","usage","BufferUsage","UNIFORM","COPY_DST","_signature","_initUniformGroup","uniformGroupSignature","elements","keys","uniformStructures","createUboElements","syncFunction","_generateUboSync","generateUboSync","syncUniformGroup","uniformGroupData","dataInt32","updateUniformGroup","_dirtyId","synced","abgr","out","BufferResource","EventEmitter","_resourceType","_resourceId","_bufferResource","onBufferChange","destroyBuffer"],"sourceRoot":""}